<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>FaaS tutorial 1: Start with Firebase and prepare the ground</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/OeJQJXRTl-M/faas-tutorial-1-start-with-firebase-and.html" /><category term="feed_group_name_aerogear" scheme="searchisko:content:tags" /><category term="feed_name_corinnekrych" scheme="searchisko:content:tags" /><author><name>Corinne Krych</name></author><id>searchisko:content:id:jbossorg_blog-faas_tutorial_1_start_with_firebase_and_prepare_the_ground</id><updated>2019-01-17T13:59:00Z</updated><published>2019-01-17T13:59:00Z</published><content type="html">As being an organiser of &lt;a href=""&gt;RivieraDEV&lt;/a&gt;, I was looking for a platform to host our CFP (call for paper). I've bumped into the open source project &lt;a href="https://github.com/bpetetot/conference-hall"&gt;conference-hall&lt;/a&gt; wandering on twitter (the gossip bird &lt;i&gt;is useful&lt;/i&gt; from time to time). &lt;br/&gt;&lt;br/&gt;The app is nicely crafted and could be used free, even better I've learned afterward, there is an hosted version! That's the one I wanted to use but we were missing one key feature: sending email to inform speaker of the deliberations and provide a way for speakers to confirm their venue. &lt;br/&gt;&lt;br/&gt;Open Source Project? Let's make the world better by contributing... &lt;br/&gt;&lt;br/&gt;On a first look, conference-hall is a web app deployed on Google Cloud Platform. The SPA is deployed using Firebase tooling and make use of firestore database. By contributing to the project, I get acquainted to Firebase. Learning something new is cool, sharing it is even better &lt;br/&gt;&lt;br/&gt;Time to start a series of blogs post on the &lt;a href="https://en.wikipedia.org/wiki/Function_as_a_service"&gt;FaaS&lt;/a&gt; subject. I'd like to explore Google functions as a service but also go broader and see how it is implemented in open source world. &lt;br/&gt;&lt;br/&gt;In this first article, I'll share with your how to get started configuring a project from scratch in Firebase and how to deploy it to get a ground project to introduce cloud functions in the next post. Let's get started step by step... &lt;br/&gt;&lt;br/&gt;&lt;h2&gt;Step 1️⃣: Initialise firebase project&lt;/h2&gt;Go to &lt;a href="https://console.firebase.google.com/u/0/"&gt;Firebase console&lt;/a&gt; and Create a firebase project, let's name it &lt;code&gt;test&lt;/code&gt; &lt;br/&gt;&lt;br/&gt;&lt;h2&gt;Step 2️⃣: Use Firestore&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;In left-hand side menu select Database tab, then click &lt;code&gt;Create Database&lt;/code&gt;. Follow &lt;a href="https://firebase.google.com/docs/firestore/quickstart?authuser=0"&gt;Firestore documentation&lt;/a&gt; if in trouble. The Firebase console UI is quite easy to follow. Note Firestore is still beta at the time of writing.&lt;/li&gt;&lt;li&gt;Choose &lt;code&gt;Start in test mode&lt;/code&gt; then click &lt;code&gt;Enabled&lt;/code&gt; button.&lt;/li&gt;&lt;/ul&gt;You should be forwarded to the Database explorer, you can now add a new collection &lt;code&gt;items&lt;/code&gt; as below: &lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Nt0UrxwcUcU/XDxdi53bz7I/AAAAAAAADKE/CIU_HMqVH5cMw4-1k0QpTDIV5JfGoICpACLcBGAs/s1600/unspecified-1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-Nt0UrxwcUcU/XDxdi53bz7I/AAAAAAAADKE/CIU_HMqVH5cMw4-1k0QpTDIV5JfGoICpACLcBGAs/s640/unspecified-1.png" width="640" height="566" data-original-width="868" data-original-height="768" /&gt;&lt;/a&gt;&lt;/div&gt; &lt;h2&gt;Step 3️⃣: Boostrap app&lt;/h2&gt;We use create-react-app to get an initial react app &lt;pre&gt;&lt;code class="language-JavaScript"&gt;npx create-react-app test-crud&lt;br /&gt;npm install --save firebase&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;and then we've added firebase SDK. &lt;br/&gt;&lt;br/&gt;&lt;h3&gt;Insert firebase config&lt;/h3&gt; &lt;ul&gt; &lt;li&gt; We use &lt;a href="https://facebook.github.io/create-react-app/docs/adding-custom-environment-variables"&gt;react-script env variable support&lt;/a&gt;&lt;/li&gt;&lt;li&gt; In &lt;code&gt;env.local&lt;/code&gt; copy variable from firebase console &lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-0w5tsyhpPLY/XDs1ljYsWtI/AAAAAAAADJ4/NgXjFWL1qwYhC1K5Ct0uuR6I6-33-A84gCPcBGAYYCw/s1600/firebase-config.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-0w5tsyhpPLY/XDs1ljYsWtI/AAAAAAAADJ4/NgXjFWL1qwYhC1K5Ct0uuR6I6-33-A84gCPcBGAYYCw/s640/firebase-config.png" width="640" height="442" data-original-width="1084" data-original-height="748" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt; In &lt;code&gt;src/firebase/firebase.js&lt;/code&gt;, read env variable and initialise &lt;pre&gt;&lt;code class="language-JavaScript"&gt;const config = {&lt;br /&gt; apiKey: process.env.REACT_APP_API_KEY,&lt;br /&gt; authDomain: process.env.REACT_APP_AUTH_DOMAIN,&lt;br /&gt; databaseURL: process.env.REACT_APP_DATABASE_URL,&lt;br /&gt; projectId: process.env.REACT_APP_PROJECT_ID,&lt;br /&gt; storageBucket: process.env.REACT_APP_STARAGE_BUCKET,&lt;br /&gt; messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,&lt;br /&gt;};&lt;br /&gt;firebase.initializeApp(config);&lt;br /&gt;&lt;br /&gt;firebase.firestore().settings(settings);&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;This way you keep your secret safe, not committed in your code &lt;br/&gt;&lt;br/&gt;&lt;h2&gt;Step 4️⃣: Add routing&lt;/h2&gt;&lt;pre&gt;&lt;code class="language-JavaScript"&gt;npm install --save react-router-dom&lt;br /&gt;mkdir src/components&lt;br /&gt;touch src/components/create.js&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;And define route in &lt;code&gt;src/index.js&lt;/code&gt;&lt;pre&gt;&lt;code class="language-JavaScript"&gt;ReactDOM.render(&lt;br /&gt; &amp;lt;Router&amp;gt;&lt;br /&gt; &amp;lt;div&amp;gt;&lt;br /&gt; &amp;lt;Route exact path='/' component={App} /&amp;gt;&lt;br /&gt; &amp;lt;Route path='/create' component={Create} /&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/Router&amp;gt;,&lt;br /&gt; document.getElementById('root')&lt;br /&gt;);&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;In the root path, we'll display the list of items. In the the &lt;code&gt;Create&lt;/code&gt; component we'll define a form component to add new items to the list. &lt;br/&gt;&lt;br/&gt;&lt;h2&gt;Step 5️⃣: Access Firestore in the app&lt;/h2&gt;Let's define the content of &lt;code&gt;Create&lt;/code&gt; component in &lt;code&gt;src/component/index.js&lt;/code&gt;&lt;pre&gt;&lt;code class="language-JavaScript"&gt;class Create extends Component {&lt;br /&gt; constructor() {&lt;br /&gt; super();&lt;br /&gt; this.ref = firebase.firestore().collection('items'); // [1] retrieve items reference&lt;br /&gt; this.state = {&lt;br /&gt; field1: '',&lt;br /&gt; field2: '',&lt;br /&gt; };&lt;br /&gt; }&lt;br /&gt; onChange = (e) =&gt; {&lt;br /&gt; const state = this.state;&lt;br /&gt; state[e.target.name] = e.target.value;&lt;br /&gt; this.setState(state);&lt;br /&gt; };&lt;br /&gt; onSubmit = (e) =&gt; {&lt;br /&gt; e.preventDefault();&lt;br /&gt; const { field1, field2 } = this.state;&lt;br /&gt; this.ref.add({ // [2] Insert by using firestore SDK&lt;br /&gt; field1,&lt;br /&gt; field2,&lt;br /&gt; }).then((docRef) =&gt; {&lt;br /&gt; this.setState({&lt;br /&gt; field1: '',&lt;br /&gt; field2: '',&lt;br /&gt; });&lt;br /&gt; this.props.history.push("/")&lt;br /&gt; }).catch((error) =&gt; {&lt;br /&gt; console.error("Error adding document: ", error);&lt;br /&gt; });&lt;br /&gt; };&lt;br /&gt;&lt;br /&gt; render() {&lt;br /&gt; const { field1, field2 } = this.state;&lt;br /&gt; return (&lt;br /&gt; &amp;lt;div&amp;gt;&lt;br /&gt; &amp;lt;div&amp;gt;&lt;br /&gt; &amp;lt;div&amp;gt;&lt;br /&gt; &amp;lt;h3&amp;gt;&lt;br /&gt; Add Item&lt;br /&gt; &amp;lt;/h3&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;div&amp;gt;&lt;br /&gt; &amp;lt;h4&amp;gt;Link to="/" &amp;gt;Items List&amp;lt;/Link&amp;gt;&amp;lt;/h4&amp;gt;&lt;br /&gt; &amp;lt;form onSubmit={this.onSubmit}&amp;gt;&lt;br /&gt; &amp;lt;div&amp;gt;&lt;br /&gt; &amp;lt;label htmlFor="title"&amp;gt;field1:&amp;lt;/label&amp;gt;&lt;br /&gt; &amp;lt;input type="text" name="field1" value={field1} onChange={this.onChange} /&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;div&amp;gt;&lt;br /&gt; &amp;lt;label htmlFor="title"&amp;gt;field2:&amp;lt;/label&amp;gt;&lt;br /&gt; &amp;lt;input type="text" name="field2" value={field2} onChange={this.onChange} /&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;button type="submit"&amp;gt;Submit&amp;lt;/button&amp;gt;&lt;br /&gt; &amp;lt;/form&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt; );&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;export default Create;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;It seems a lot of code but the key points are [1] and [2] where we use the firestore SDK to add a new item in the database directly from the client app. the call in [2] is going to be revisited in next blog post to make usage of cloud function. &lt;br/&gt;&lt;br/&gt;&lt;h2&gt;Step 6️⃣: Deploy on firebase&lt;/h2&gt; So we build a small test app accessing firestore DB let's deploy it on the cloud with Firebase tooling ! &lt;ul&gt;&lt;li&gt; Start running a production build &lt;pre&gt;&lt;code class="language-JavaScript"&gt;$ npm run build&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt; Install firebase tools &lt;pre&gt;&lt;code class="language-JavaScript"&gt;$ npm install -g firebase-tools&lt;br /&gt;$ firebase login&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt; Init function &lt;pre&gt;&lt;code class="language-JavaScript"&gt;$ firebase init&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt; &lt;li&gt; Step 1: Select the Firebase features you want to use: Firestore Hosting. For now we focus only on deploying ie: hosting the app&lt;/li&gt; &lt;li&gt; Step 2: Firebase command-line interface will pull up your list of Firebase projects, where you pick firebase-crud.&lt;/li&gt; &lt;li&gt; Step 3: Keep the default for the Database Rules file name and just press enter.&lt;/li&gt; &lt;li&gt; Step 4: Pay attention to the question about public directory, which is the directory that will be deployed and served by Firebase. In our case it is &lt;code&gt;build&lt;/code&gt;, which is the folder where our production build is located. Type “build” and proceed.&lt;/li&gt; &lt;li&gt; Step 5: Firebase will ask you if you want the app to be configured as a single-page app. Say "yes".&lt;/li&gt; &lt;li&gt; Step 6: Firebase will warn us that we already have &lt;code&gt;build/index.html&lt;/code&gt;. All fine!&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt; deploy! &lt;pre&gt;&lt;code class="language-JavaScript"&gt;$ firebase deploy&lt;br /&gt;...&lt;br /&gt;✔ Deploy complete!&lt;br /&gt;&lt;br /&gt; Project Console: https://console.firebase.google.com/project/test-83c1a/overview&lt;br /&gt; Hosting URL: https://test-83c1a.firebaseapp.com&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt; &lt;br/&gt;&lt;br/&gt;&lt;h2&gt;Where to go from there?&lt;/h2&gt; In this blog post you've seen how to configure and deploy an SPA on firebase and how to set up a Firestore DB. Next blog post, you'll see how to write you first Google Cloud Function. Stay tuned.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/OeJQJXRTl-M" height="1" width="1" alt=""/&gt;</content><summary>As being an organiser of RivieraDEV, I was looking for a platform to host our CFP (call for paper). I've bumped into the open source project conference-hall wandering on twitter (the gossip bird is useful from time to time). The app is nicely crafted and could be used free, even better I've learned afterward, there is an hosted version! That's the one I wanted to use but we were missing one key fe...</summary><dc:creator>Corinne Krych</dc:creator><dc:date>2019-01-17T13:59:00Z</dc:date><feedburner:origLink>http://corinnekrych.blogspot.com/2019/01/faas-tutorial-1-start-with-firebase-and.html</feedburner:origLink></entry><entry><title>Modern web applications on OpenShift: Part 3 — Openshift as a development environment</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/siuhebeaROc/" /><category term="JavaScript" /><category term="Modern App Dev" /><category term="Node.js" /><category term="Red Hat OpenShift Application Runtimes" /><category term="Red Hat OpenShift Container Platform" /><category term="development workflow" /><category term="Javascript" /><category term="react" /><category term="Red Hat OpenShift" /><category term="S2I" /><category term="source-to-image" /><category term="web development" /><author><name>Lucas Holmquist</name></author><id>https://developers.redhat.com/blog/?p=527607</id><updated>2019-01-17T13:00:37Z</updated><published>2019-01-17T13:00:37Z</published><content type="html">&lt;p&gt;Welcome back to the final part of this multipart series about deploying modern web applications on Red &lt;a href="http://openshift.com/"&gt;Hat OpenShift&lt;/a&gt;. In the &lt;a href="https://developers.redhat.com/blog/2018/10/04/modern-web-apps-openshift-part-1/"&gt;first post&lt;/a&gt;, we took a look at how to deploy a modern web application using the fewest commands.&lt;/p&gt; &lt;p&gt;In the &lt;a href="https://developers.redhat.com/blog/2018/10/23/modern-web-applications-on-openshift-part-2-using-chained-builds/"&gt;second part&lt;/a&gt;, we took a deeper look into how the new source-to-image (S2I) web app builder works and how to use it as part of a chained build.&lt;/p&gt; &lt;p&gt;This third and final part will take a look at how you can run your app&amp;#8217;s &amp;#8220;development workflow&amp;#8221; on OpenShift.&lt;span id="more-527607"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Development workflow&lt;/h2&gt; &lt;p&gt;As mentioned in the &lt;a href="https://developers.redhat.com/blog/2018/10/04/modern-web-apps-openshift-part-1/"&gt;first post&lt;/a&gt;, a common development workflow for modern web applications is to run a &amp;#8220;development server&amp;#8221; that watches your local files for changes. When a change occurs, the application&amp;#8217;s build is run and the browser is refreshed with your updated app.&lt;/p&gt; &lt;p&gt;Most of the modern frameworks have this &amp;#8220;development server&amp;#8221; built into their respective CLI tools.&lt;/p&gt; &lt;h3&gt;A local example&lt;/h3&gt; &lt;p&gt;Let&amp;#8217;s first start with running our application locally, so we can see how this workflow is supposed to work. We are going to continue with the &lt;a href="https://github.com/lholmquist/react-web-app"&gt;React example&lt;/a&gt; that we saw in the previous articles. Even though we are using React as an example here, the workflow concepts are very similar for all the other modern frameworks.&lt;/p&gt; &lt;p&gt;For this React example, to start the &amp;#8220;development server&amp;#8221; we run the following:&lt;/p&gt; &lt;pre&gt;$ npm run start &lt;/pre&gt; &lt;p&gt;We should see something like this in our terminal:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-dev-server-local-1.png"&gt;&lt;img class=" aligncenter wp-image-528457 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-dev-server-local-1.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-dev-server-local-1.png" alt="Starting the development server" width="572" height="253" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-dev-server-local-1.png 572w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-dev-server-local-1-300x133.png 300w" sizes="(max-width: 572px) 100vw, 572px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;And our application should open in our default browser:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-localhost.png"&gt;&lt;br /&gt; &lt;img class=" aligncenter wp-image-528467 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-localhost-1024x620.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-localhost-1024x620.png" alt="Application running in a browser" width="640" height="388" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-localhost-1024x620.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-localhost-300x182.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-localhost-768x465.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/10/react-localhost.png 1205w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Now, if we make a change to a file, we should see the application running in the browser refresh with the latest changes.&lt;/p&gt; &lt;p&gt;As I said before, this is a common workflow for local development, but how can we get this workflow onto OpenShift?&lt;/p&gt; &lt;h3&gt;Development server on OpenShift&lt;/h3&gt; &lt;p&gt;In the &lt;a href="https://developers.redhat.com/blog/2018/10/23/modern-web-applications-on-openshift-part-2-using-chained-builds/"&gt;previous article&lt;/a&gt;, we took a look at the run phase of the S2I image. We saw that the default way of serving our web app is with the &lt;code&gt;serve&lt;/code&gt; module.&lt;/p&gt; &lt;p&gt;However, if we &lt;a href="https://github.com/nodeshift/centos7-s2i-web-app/blob/master/s2i/run#L10"&gt;look closely at that run script&lt;/a&gt;, we can see that we can specify an environment variable, &lt;code&gt;$NPM_RUN&lt;/code&gt;, which gives us the ability to execute a custom command.&lt;/p&gt; &lt;p&gt;For example, using the &lt;code&gt;nodeshift&lt;/code&gt; module, the command to deploy our application might look something like this:&lt;/p&gt; &lt;pre&gt;$ npx nodeshift --deploy.env NPM_RUN="yarn start" --dockerImage=nodeshift/centos7-s2i-web-app &lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note: The above example has been shortened to show an idea.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Here we are adding the &lt;code&gt;NPM_RUN&lt;/code&gt; environment variable to our deployment. This will tell our run phase to run &lt;code&gt;yarn start&lt;/code&gt;, which starts the React development server inside our OpenShift pod.&lt;/p&gt; &lt;p&gt;If you took a look at the log of the running pod, you might see something like this running:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/react-pod-dev-server.png"&gt;&lt;img class=" aligncenter wp-image-553467 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/react-pod-dev-server-1024x550.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/react-pod-dev-server-1024x550.png" alt="Log of the running pod" width="640" height="344" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/react-pod-dev-server-1024x550.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/react-pod-dev-server-300x161.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/react-pod-dev-server-768x413.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/react-pod-dev-server.png 1381w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Of course, this doesn&amp;#8217;t really matter unless we can sync our local code with the code that is being watched on our remote cluster.&lt;/p&gt; &lt;h3&gt;Remote and local sync&lt;/h3&gt; &lt;p&gt;Luckily, we can use &lt;code&gt;nodeshift&lt;/code&gt; again to help us out. We can use the &lt;code&gt;watch&lt;/code&gt; command.&lt;/p&gt; &lt;p&gt;After we run the command to deploy our application&amp;#8217;s development server, we can then run this command:&lt;/p&gt; &lt;pre&gt;$ npx nodeshift watch &lt;/pre&gt; &lt;p&gt;This will connect to the running pod we just created and sync our local files with our remote cluster, while also watching our local system for changes.&lt;/p&gt; &lt;p&gt;So if you were to update the &lt;code&gt;src/App.js&lt;/code&gt; file, that change will be detected and copied to the remote cluster, and the running development server will then refresh the browser.&lt;/p&gt; &lt;p&gt;For completeness, here are the full commands:&lt;/p&gt; &lt;pre&gt;$ npx nodeshift --strictSSL=false --dockerImage=nodeshift/centos7-s2i-web-app --build.env YARN_ENABLED=true --expose --deploy.env NPM_RUN="yarn start" --deploy.port 3000 $ npx nodeshift watch --strictSSL=false &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;watch&lt;/code&gt; command is an abstraction on top of the &lt;code&gt;oc rsync&lt;/code&gt; command. To learn more about how that works, &lt;a href="https://docs.okd.io/latest/dev_guide/copy_files_to_container.html" target="_blank" rel="noopener"&gt;check it out here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Even though the example we saw was using React, this technique also works with other frameworks. You just need to change the &lt;code&gt;NPM_RUN&lt;/code&gt; environment variable.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this 3 part series, we saw how to deploy modern web applications to OpenShift in a few ways.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/2018/10/04/modern-web-apps-openshift-part-1/" target="_blank" rel="noopener"&gt;In part one,&lt;/a&gt; we saw how to get started quickly with the new Web App S2I Image.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/2018/10/23/modern-web-applications-on-openshift-part-2-using-chained-builds/" target="_blank" rel="noopener"&gt;Part 2 dove a little deeper&lt;/a&gt; into how the S2I image worked and how to use chained builds.&lt;/p&gt; &lt;p&gt;This last part was a brief overview of how you can run a development server on OpenShift.&lt;/p&gt; &lt;h2&gt;Additional resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/books/deploying-openshift/"&gt;Deploying to OpenShift: a guide for impatient developers&lt;/a&gt; (free ebook)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/06/11/container-native-nodejs-istio-rhoar/" rel="bookmark"&gt;Building Container-Native Node.js Applications with Red Hat OpenShift Application Runtimes and Istio&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/05/15/debug-your-node-js-application-on-openshift-with-chrome-devtools/" rel="bookmark"&gt;How to Debug Your Node.js Application on OpenShift with Chrome DevTools&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/04/16/zero-express-openshift-3-commands/" rel="bookmark"&gt;Zero to Express on OpenShift in Three Commands&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/12/rhoar-nodejs-annoucement/" rel="bookmark"&gt;Announcing: Node.js General Availability in Red Hat OpenShift Application Runtimes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/21/monitoring-node-js-applications-on-openshift-with-prometheus/" rel="bookmark"&gt;Monitoring Node.js Applications on OpenShift with Prometheus&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Other articles on &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;OpenShift and Kubernetes&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F17%2Fmodern-web-applications-on-openshift-part-3-openshift-as-a-development-environment%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%203%20%E2%80%94%20Openshift%20as%20a%20development%20environment" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F17%2Fmodern-web-applications-on-openshift-part-3-openshift-as-a-development-environment%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%203%20%E2%80%94%20Openshift%20as%20a%20development%20environment" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F17%2Fmodern-web-applications-on-openshift-part-3-openshift-as-a-development-environment%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%203%20%E2%80%94%20Openshift%20as%20a%20development%20environment" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F17%2Fmodern-web-applications-on-openshift-part-3-openshift-as-a-development-environment%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%203%20%E2%80%94%20Openshift%20as%20a%20development%20environment" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F17%2Fmodern-web-applications-on-openshift-part-3-openshift-as-a-development-environment%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%203%20%E2%80%94%20Openshift%20as%20a%20development%20environment" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F17%2Fmodern-web-applications-on-openshift-part-3-openshift-as-a-development-environment%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%203%20%E2%80%94%20Openshift%20as%20a%20development%20environment" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F17%2Fmodern-web-applications-on-openshift-part-3-openshift-as-a-development-environment%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%203%20%E2%80%94%20Openshift%20as%20a%20development%20environment" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F17%2Fmodern-web-applications-on-openshift-part-3-openshift-as-a-development-environment%2F&amp;#38;linkname=Modern%20web%20applications%20on%20OpenShift%3A%20Part%203%20%E2%80%94%20Openshift%20as%20a%20development%20environment" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F17%2Fmodern-web-applications-on-openshift-part-3-openshift-as-a-development-environment%2F&amp;#038;title=Modern%20web%20applications%20on%20OpenShift%3A%20Part%203%20%E2%80%94%20Openshift%20as%20a%20development%20environment" data-a2a-url="https://developers.redhat.com/blog/2019/01/17/modern-web-applications-on-openshift-part-3-openshift-as-a-development-environment/" data-a2a-title="Modern web applications on OpenShift: Part 3 — Openshift as a development environment"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/17/modern-web-applications-on-openshift-part-3-openshift-as-a-development-environment/"&gt;Modern web applications on OpenShift: Part 3 &amp;#8212; Openshift as a development environment&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/siuhebeaROc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Welcome back to the final part of this multipart series about deploying modern web applications on Red Hat OpenShift. In the first post, we took a look at how to deploy a modern web application using the fewest commands. In the second part, we took a deeper look into how the new source-to-image (S2I) web [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/17/modern-web-applications-on-openshift-part-3-openshift-as-a-development-environment/"&gt;Modern web applications on OpenShift: Part 3 &amp;#8212; Openshift as a development environment&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/01/17/modern-web-applications-on-openshift-part-3-openshift-as-a-development-environment/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">527607</post-id><dc:creator>Lucas Holmquist</dc:creator><dc:date>2019-01-17T13:00:37Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/17/modern-web-applications-on-openshift-part-3-openshift-as-a-development-environment/</feedburner:origLink></entry><entry><title>How much faster is Java 11?</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/B2kQ9o1WBPg/HowMuchFasterIsJava11.html" /><category term="benchmark" scheme="searchisko:content:tags" /><category term="feed_group_name_optaplanner" scheme="searchisko:content:tags" /><category term="feed_name_optaplanner" scheme="searchisko:content:tags" /><category term="production" scheme="searchisko:content:tags" /><author><name>rsynek</name></author><id>searchisko:content:id:jbossorg_blog-how_much_faster_is_java_11</id><updated>2019-01-17T08:16:42Z</updated><published>2019-01-17T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Java 11 was released some time ago, although the &lt;a href="https://www.baeldung.com/java-in-2018"&gt;majority of developers stay on Java 8&lt;/a&gt;. Let’s see which one of them is faster for &lt;a href="https://www.optaplanner.org/"&gt;OptaPlanner&lt;/a&gt;. The best way to find out is of course running OptaPlanner benchmarks. This article is a follow up on &lt;a href="https://www.optaplanner.org/blog/2014/03/20/HowMuchFasterIsJava8.html"&gt;our similar article for Java 8&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_benchmark_methodology"&gt;Benchmark methodology&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To run the benchmark we used:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A stable machine without any other computational demanding processes running and with &lt;code&gt;2 x Intel® Xeon® CPU E5-2609 0 @ 2.4 GHz (8 cores total)&lt;/code&gt; and &lt;code&gt;31.3 GiB&lt;/code&gt; RAM memory, running RHEL 6.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Both G1 and Parallel GC for both Java versions to compare the impact of garbage collection. Java executed with the parameters &lt;code&gt;-Xmx1536M -server -XX:+UseG1GC&lt;/code&gt; and &lt;code&gt;-Xmx1536M -server -XX:+UseParallelGC&lt;/code&gt; respectively.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Both Oracle Java 8:&lt;/p&gt; &lt;div class="literalblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;java version "1.8.0_191" Java(TM) SE Runtime Environment (build 1.8.0_191-b12) Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;and OpenJDK 11:&lt;/p&gt; &lt;/div&gt; &lt;div class="literalblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;openjdk version "11.0.1" 2018-10-16 OpenJDK Runtime Environment 18.9 (build 11.0.1+13) OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13, mixed mode)&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;OptaPlanner &lt;code&gt;7.14.0.Final&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Solving a planning problem involves &lt;strong&gt;no IO&lt;/strong&gt; (except a few milliseconds during startup to load the input). &lt;strong&gt;A single CPU is completely saturated.&lt;/strong&gt; It constantly creates many short lived objects, and the GC collects them afterwards.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Each run solves 11 planning problems with OptaPlanner. Each planning problem runs for 5 minutes and starts with a 30 second JVM warm up which is discarded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The benchmarks measure the number of scores calculated per millisecond. Higher is better. Calculating a score for a proposed planning solution is non-trivial: it involves many calculations, including checking for conflicts between every entity and every other entity.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_executive_summary"&gt;Executive summary&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;With Java 11, the average improvement is &lt;strong&gt;16.1%&lt;/strong&gt; for G1 and &lt;strong&gt;4.5%&lt;/strong&gt; for Parallel GC. Although Parallel GC is oriented towards throughput, whereas G1 focuses rather on low-latency garbage collection, the significant improvement of G1 in Java 11 lead to a direct &lt;a href="#table3"&gt;comparison of these two garbage collection algorithms&lt;/a&gt;. For more information about difference between various GC algorithms, please see &lt;a href="https://dzone.com/articles/choosing-the-right-gc"&gt;this article&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This shows that Parallel GC is still the preferred GC for OptaPlanner, as throughput is much more important for solving optimization problems with OptaPlanner than the latencies introduced by the GC.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_results"&gt;Results&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="sect2"&gt; &lt;h3 id="_java_8_vs_java_11"&gt;Java 8 vs. Java 11&lt;/h3&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="Java8VsJava11usingG1GC.svg" alt="Java8VsJava11usingG1GC"&gt; &lt;/img&gt; &lt;/div&gt; &lt;table id="table1" class="tableblock frame-all grid-all spread"&gt; &lt;caption class="title"&gt;Table 1. Score calculation count per second with G1 GC&lt;/caption&gt; &lt;colgroup&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3337%;"&gt; &lt;/col&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top" /&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Cloud balancing&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Machine reassignment&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Course scheduling&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Exam scheduling&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Nurse rostering&lt;sup&gt;.&lt;/sup&gt;&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Traveling Tournament&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JDK&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;200c&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;800c&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;B1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;B10&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;c7&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;c8&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;s2&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;s3&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;m1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;mh1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;nl14&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Java 8&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;38,074&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;34,870&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;113,490&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;20,398&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;4,296&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;4,840&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;7,003&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;5,437&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;2,385&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;2,021&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;812&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;OpenJDK 11&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;41,753&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;41,282&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;166,676&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;20,363&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;4,473&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;5,466&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;8,157&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;5,927&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;2,772&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;2,536&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;957&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Difference&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;9.7%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;18.4%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;46.9%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;-0.2%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;4.1%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;12.9%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;16.5%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;9.0%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;16.2%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;25.5%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;17.9%&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Average&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="11"&gt;&lt;p class="tableblock"&gt;&lt;strong&gt;16.1%&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/col&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Almost every data set improves on Java 11 over Java 8 using the G1 garbage collector. On average, there’s a 16% improvement just by switching to Java 11. A possible explanation for this improvement could be the &lt;a href="http://openjdk.java.net/jeps/307"&gt;JEP 307: Parallel Full GC for G1&lt;/a&gt;, introduced in Java 10.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="Java8VsJava11usingParallelGC.svg" alt="Java8VsJava11usingParallelGC"&gt; &lt;/img&gt; &lt;/div&gt; &lt;table class="tableblock frame-all grid-all spread"&gt; &lt;caption class="title"&gt;Table 2. Score calculation count per second with Parallel GC&lt;/caption&gt; &lt;colgroup&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3337%;"&gt; &lt;/col&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top" /&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Cloud balancing&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Machine reassignment&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Course scheduling&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Exam scheduling&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Nurse rostering&lt;sup&gt;.&lt;/sup&gt;&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Traveling Tournament&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JDK&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;200c&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;800c&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;B1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;B10&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;c7&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;c8&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;s2&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;s3&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;m1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;mh1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;nl14&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Java 8&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;54,990&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;52,514&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;122,611&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;13,382&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;4,821&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;5,880&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;8,775&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;6,170&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;3,234&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;2,682&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;880&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;OpenJDK 11&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;54,316&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;50,120&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;140,816&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;11,129&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;4,927&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;6,071&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;8,996&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;6,383&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;3,336&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;3,087&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;1,125&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Difference&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;-1.2%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;-4.6%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;14.8%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;-16.8%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;2.2%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;3.2%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;2.5%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;3.5%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;3.2%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;15.1%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;27.8%&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Average&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="11"&gt;&lt;p class="tableblock"&gt;&lt;strong&gt;4.5%&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/col&gt; &lt;div class="paragraph"&gt; &lt;p&gt;With the Parallel Garbage Collector, the results are less definite than G1. There is an improvement for some data sets, while others remain intact or show even a performance drop. However, on average, the Java 11 performs over 4% better.&lt;/p&gt; &lt;/div&gt; &lt;/col&gt; &lt;div class="sect2"&gt; &lt;h3 id="_parallel_gc_vs_g1_gc_on_java_11"&gt;Parallel GC vs. G1 GC on Java 11&lt;/h3&gt; &lt;table id="table3" class="tableblock frame-all grid-all spread"&gt; &lt;caption class="title"&gt;Table 3. Comparison of score calculation count per second on Java 11 with Parallel GC and G1 GC being used&lt;/caption&gt; &lt;colgroup&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3333%;"&gt; &lt;col style="width: 8.3337%;"&gt; &lt;/col&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top" /&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Cloud balancing&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Machine reassignment&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Course scheduling&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Exam scheduling&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="2"&gt;&lt;p class="tableblock"&gt;Nurse rostering&lt;sup&gt;.&lt;/sup&gt;&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Traveling Tournament&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Java 11&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;200c&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;800c&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;B1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;B10&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;c7&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;c8&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;s2&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;s3&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;m1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;mh1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-top"&gt;&lt;p class="tableblock"&gt;nl14&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;OpenJDK 11 Parallel GC&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;54,316&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;50,120&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;140,816&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;11,129&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;4,927&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;6,071&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;8,996&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;6,383&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;3,336&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;3,087&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;1,125&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;OpenJDK 11 G1 GC&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;41,753&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;41,282&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;166,676&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;20,363&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;4,473&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;5,466&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;8,157&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;5,927&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;2,772&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;2,536&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;957&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Difference&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;-23.1%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;-17.6%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;18.4%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;83.0%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;-9.2%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;-10.0%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;-9.3%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;-7.1%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;-16.9%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;-17.8%&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-right valign-top"&gt;&lt;p class="tableblock"&gt;-14.9%&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Average&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-center valign-middle" colspan="11"&gt;&lt;p class="tableblock"&gt;&lt;strong&gt;-2.3%&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/col&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Although G1 GC shows a clear improvement from Java 8, compared to Parallel GC it’s less beneficial GC strategy for OptaPlanner on the majority of the data sets. The only exception is Machine Reassignment, which shows that the G1 OptaPlanner is able to compute score calculation 83% faster. This applies to Java 8 too, as shown in &lt;a href="#table1"&gt;Score calculation count per second with G1 GC&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/col&gt; &lt;/col&gt; &lt;/col&gt; &lt;div class="sect1"&gt; &lt;h2 id="_conclusion"&gt;Conclusion&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Java 11 brings additional improvements, which vary across different &lt;a href="https://www.optaplanner.org/"&gt;OptaPlanner&lt;/a&gt; examples and data sets. On average, it is 4.5% faster when using Parallel GC and 16.1% faster with G1 GC. Despite the significant improvement for G1 GC, Parallel GC is still faster for most data sets in this benchmark.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;/table&gt;&lt;/div&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;/table&gt;&lt;/div&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/B2kQ9o1WBPg" height="1" width="1" alt=""/&gt;</content><summary>Java 11 was released some time ago, although the majority of developers stay on Java 8. Let’s see which one of them is faster for OptaPlanner. The best way to find out is of course running OptaPlanner benchmarks. This article is a follow up on our similar article for Java 8. Benchmark methodology To run the benchmark we used: A stable machine without any other computational demanding processes run...</summary><dc:creator>rsynek</dc:creator><dc:date>2019-01-17T00:00:00Z</dc:date><feedburner:origLink>https://www.optaplanner.org/blog/2019/01/17/HowMuchFasterIsJava11.html</feedburner:origLink></entry><entry><title>Leveraging OpenShift or Kubernetes for automated performance tests (part 3)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/MFp67gKpwPc/" /><category term="CI/CD" /><category term="Containers" /><category term="Java" /><category term="Kubernetes" /><category term="Modern App Dev" /><category term="Performance" /><category term="Red Hat OpenShift Container Platform" /><category term="ci/cd" /><category term="Jenkins" /><category term="JMeter" /><category term="kubernetes" /><category term="OpenShift Container Platform" /><category term="performance testing" /><category term="Red Hat OpenShift" /><category term="test automation" /><author><name>Frédéric Giloux</name></author><id>https://developers.redhat.com/blog/?p=552337</id><updated>2019-01-16T13:00:08Z</updated><published>2019-01-16T13:00:08Z</published><content type="html">&lt;p&gt;This is the third of a series of three articles based on a session I held at EMEA Red Hat Tech Exchange. In the &lt;a href="https://developers.redhat.com/blog/2018/11/22/automated-performance-testing-kubernetes-openshift/"&gt;first article&lt;/a&gt;, I presented the rationale and approach for leveraging &lt;a href="https://www.openshift.com"&gt;Red Hat OpenShift&lt;/a&gt; or &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; for automated performance testing, and I gave an overview of the setup. In the &lt;a href="https://developers.redhat.com/blog/2019/01/03/leveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2/"&gt;second article&lt;/a&gt;, we looked at building an observability stack. In this third part, we will see how the execution of the performance tests can be automated and related metrics gathered.&lt;/p&gt; &lt;p&gt;An example of what is described in this article is available in my &lt;a href="https://github.com/fgiloux/auto-perf-test/"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-552337"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Overview of the setup&lt;/h2&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6.png"&gt;&lt;img class="aligncenter wp-image-533387 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-1024x433.png" alt="Overview" width="640" height="271" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-1024x433.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-300x127.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-768x324.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6.png 1250w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2 id="_test_automation"&gt;Test automation&lt;/h2&gt; &lt;h3 id="_test_suite"&gt;Test plan&lt;/h3&gt; &lt;p&gt;As we saw in the first article, there are several aspects that need to be taken into consideration for building a test plan that is representative of production scenarios and can easily be reused. Let&amp;#8217;s go through the examples provided in my &lt;a href="https://github.com/fgiloux/auto-perf-test/tree/master/jmeter/examples"&gt;GitHub repository&lt;/a&gt; and see how we can approach them.&lt;/p&gt; &lt;p&gt;My first advice was to use the JMeter GUI (I used JMeter 4 for this article) and its standard components for quick experimentation and as a feedback loop during the design phase. Here is &lt;a href="https://github.com/fgiloux/auto-perf-test/blob/master/jmeter/examples/jms-declarative.jmx"&gt;an example&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When we are happy with the design, we can move on to writing custom components in Groovy (a dynamic language for the Java platform that&amp;#8217;s also compatible with Java syntax), which provides more power and flexibility but also requires more effort. See examples &lt;a href="https://github.com/fgiloux/auto-perf-test/blob/master/jmeter/examples/jms-code.jmx"&gt;here&lt;/a&gt;. Running the JMeter GUI is as simple as &lt;a href="https://jmeter.apache.org/download_jmeter.cgi"&gt;downloading the archive&lt;/a&gt;, extracting it, and calling &lt;code&gt;./bin/jmeter&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s go through the JMS test suite using JSR 223 samplers (Groovy).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;General structure&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The test plan example is composed of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Thread groups containing controllers/samplers, timers, and data sets&lt;/li&gt; &lt;li&gt;User-defined variables&lt;/li&gt; &lt;li&gt;Listeners: a data writer and a back-end listener&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Assertions are not used here.&lt;/p&gt; &lt;p&gt;Per the &lt;a href="https://jmeter.apache.org/usermanual/test_plan.html"&gt;JMeter documentation&lt;/a&gt;, a thread group is the starting point of any JMeter test plan. All the elements of a test plan must be defined under the thread group. Setup and teardown thread groups are also used: they are special forms of thread groups used to perform necessary actions before and after, respectively, execution of regular thread groups. We use them for loading a message template and creating a connection to the broker.&lt;/p&gt; &lt;p&gt;We make use of global user-defined variables for allocating connection string parameters or for defining flags when we want the code to be processed only once inside a thread.&lt;/p&gt; &lt;p&gt;In regard to listeners, data writers and back-end listeners provide access to the information collected by JMeter about the test cases and allow it to be recorded in files (see &lt;a href="https://jmeter.apache.org/usermanual/component_reference.html#Simple_Data_Writer"&gt;Simple Data Writer&lt;/a&gt;) or InfluxDB (see &lt;a href="https://jmeter.apache.org/usermanual/component_reference.html#Backend_Listener"&gt;Backend Listener&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Configuration externalization&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;There are two ways to pass properties to a JMeter test plan. The first is to define them in &lt;code&gt;./bin/user.properties&lt;/code&gt;. The second is to pass them at startup using &lt;code&gt;-J&lt;/code&gt;, for example, &lt;code&gt;-JBROKER&lt;/code&gt;. We will see how this latter form can easily be leveraged when JMeter runs in a &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;container&lt;/a&gt; on &lt;a href="http://openshift.com/"&gt;OpenShift&lt;/a&gt; with a simple startup script passing injected environment variables as properties.&lt;/p&gt; &lt;p&gt;Properties can then be used among others in user-defined variables. This is what we are using, for instance, for the AMQP connection string:&lt;/p&gt; &lt;pre&gt;${__P(BROKER,messaging-perftest.apps.sandbox.com)}amqps://${__P(BROKER,messaging-perftest.apps.sandbox.com)}:${__P(PORT,443)}?transport.trustStoreLocation=${__P(JKS_LOCATION,/myrepolocation/auto-perf-test/camel-amq-fakeapp/src/main/resources/amqp-certs/amqp.jks)}&amp;#38;transport.trustStorePassword=${__P(JKS_PWD,redhat)}&amp;#38;transport.verifyHost=false&lt;/pre&gt; &lt;p&gt;With this example, if no parameter named &lt;code&gt;BROKER&lt;/code&gt; is passed, the default value, &lt;code&gt;messaging-perftest.apps.sandbox.com&lt;/code&gt;, applies. The variable can then be retrieved in Groovy with &lt;code&gt;vars.get("connection_string")&lt;/code&gt; and the property with &lt;code&gt;props.get("PAIN_TEMPLATE_LOCATION")&lt;/code&gt;. In a declarative component, &lt;code&gt;${connection_string}&lt;/code&gt; (confer the JMS Purge element in the example provided in my GitHub repository) can be used.&lt;/p&gt; &lt;p&gt;The same strategy applies to certificate configuration where the Java Key Store (JKS) location and password are passed as properties. The JKS itself is injected into the container file system by mounting a secret containing it.&lt;/p&gt; &lt;p&gt;Furthermore, test parameters like the number of messages, the injection rate, the duration, and so on can be injected through properties so that different test cases can be run one after the other without human intervention or replicating the test code.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Data sets&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;As stated in part 1 of this series, we should use data sets that are representative of the data in production. It should be possible to reuse them between runs. JMeter provides a convenient way for that through &lt;a href="https://jmeter.apache.org/usermanual/component_reference.html#CSV_Data_Set_Config"&gt;CSV Data Set Config&lt;/a&gt;. It is indeed possible to provide a CSV file with headers like &lt;a href="https://github.com/fgiloux/auto-perf-test/blob/master/jmeter/examples/pain_samples.csv"&gt;this one&lt;/a&gt;. Variables are created using the header names and populated with the raw values. The next line of the CSV file is used by the next iteration. This, combined with &lt;a href="http://groovy-lang.org/templating.html"&gt;Groovy templating capabilities&lt;/a&gt;, is a strong tool for creating workloads that reflect the diversity of production data and the occurrences of different patterns. A simple &lt;a href="https://github.com/fgiloux/auto-perf-test/blob/master/jmeter/examples/pain_template.xml"&gt;XML template&lt;/a&gt; is used as part of the demo.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Additional libraries&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;It is often required to provide libraries to JMeter so that the test plan can send messages to a broker or integrate with external systems like Jaeger. Therefore, the desired libraries just need to be added to the JMeter &lt;code&gt;lib&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Cleansing first&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;We saw previously that a clean environment is required before the tests can be run. Therefore, the test plan purges the queues. Using thread groups with different offsets (startup delay), it is possible to let the purge action finish before messages get sent to the broker. This was configured in the test plan using the JMS point-to-point component.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Injection pattern&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In the first part, we saw that latency and, to some extent, throughput get impacted by the way messages get injected. JMeter allows re-creating complex injection patterns using various timer components. In the demo, we have configured a constant throughput timer that targets sending 600 messages per minute. This is applied to all active threads in the current thread group, but JMeter allows other options and provides &lt;a href="https://jmeter.apache.org/usermanual/component_reference.html#timers"&gt;various timers&lt;/a&gt; out of the box. If none of them are suitable, it is also possible to code one in Groovy.&lt;/p&gt; &lt;h3 id="_extending_observability"&gt;Extending observability&lt;/h3&gt; &lt;p&gt;Measurement points matter for getting the real story and having test results that reflect what is expected from the application in production. With brokered messages, the enqueued time spent by messages is often more important than the time required by the application for processing.&lt;/p&gt; &lt;p&gt;To get values close enough to the end-to-end elapsed time, it is possible to use JMS timestamps. This is what has been done in the demo. The sender sets the time when the message is ready to be sent, and the receiver subtracts it from the JMS timestamp set by the message publisher inside the application. It is still an approximation, but it&amp;#8217;s usually not off by more than a few milliseconds. This allows moving away from the requirement of &amp;#8220;instantaneous&amp;#8221; reads.&lt;/p&gt; &lt;p&gt;All the results gathered by JMeter can be saved in a file. This is what is done by the simple data writer in the demo. JMeter is also able to export results to InfluxDB. A backend listener does that out of the box (as in the demo). It is again possible to use a Groovy script for this purpose, which would provide additional flexibility in terms of data selection.&lt;/p&gt; &lt;p&gt;The JMeter data in InfluxDB can be retrieved and displayed through Grafana. This is what is done in the dashboard presented in the second part of this series. Here are the JMeter graphs.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jmeter-grafana.png"&gt;&lt;img class=" aligncenter wp-image-552397 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jmeter-grafana-1024x133.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jmeter-grafana-1024x133.png" alt="JMeter graphs" width="640" height="83" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jmeter-grafana-1024x133.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/jmeter-grafana-300x39.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/jmeter-grafana-768x100.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;In a similar way, the tracing span we saw in the previous article can be extended to include a JMeter sender and receiver. For the demo, the OpenTracing and Jaeger libraries have been added to the &lt;code&gt;lib&lt;/code&gt; directory. A tracer is created per thread in the setUp Thread group and added to the properties. It can then be retrieved in the sender code, where a &lt;code&gt;TracingMessageProducer&lt;/code&gt; is used instead of the standard JMS producer. Similarly, a &lt;code&gt;TracingMessageConsumer&lt;/code&gt; is used with the tracer instead of the standard JMS component in the consumer code. This produces the result in Jaeger that we already saw in the previous article.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jaeger.png"&gt;&lt;img class=" aligncenter wp-image-552427 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jaeger-1024x435.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jaeger-1024x435.png" alt="Result in Jaeger" width="640" height="272" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jaeger-1024x435.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/jaeger-300x127.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/jaeger-768x326.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3 id="_containerisation"&gt;Containerization&lt;/h3&gt; &lt;p&gt;The first step for running JMeter in a container is to create an image with it and the libraries we have added. This is done through &lt;a href="https://github.com/fgiloux/auto-perf-test/blob/master/jmeter/container/Dockerfile"&gt;this Dockerfile&lt;/a&gt; in the demo.&lt;/p&gt; &lt;p&gt;Another aspect is that the parameters need to be provided to the JMeter process at startup. The &lt;a href="https://github.com/fgiloux/auto-perf-test/blob/master/jmeter/container/scripts/run.sh"&gt;startup script&lt;/a&gt; does that. The logic is based on the following convention: every environment variable prefixed with &lt;code&gt;J_&lt;/code&gt; gets passed to the JMeter process.&lt;/p&gt; &lt;p&gt;The script also runs the test plans that have been provided in a specific directory. This allows us to mount a &lt;a href="https://github.com/fgiloux/auto-perf-test/blob/master/jmeter/openshift/apt-jmx-cm.yaml"&gt;configMap&lt;/a&gt; into the container file system and have the test plans provided by it with the required data sets and templates executed without the need to re-create a container image. In a similar way, certificates used to communicate with the broker are injected through secrets and mounted into the container file system. The test results are stored on a persistent volume, which makes it possible to have the same directory mounted into the Jenkins container.&lt;/p&gt; &lt;p&gt;Finally, the script makes a REST call if a URL has been provided to notify Jenkins (it would work with other CI tools as well) that the execution of the test plan(s) has completed.&lt;/p&gt; &lt;p&gt;The last point is that a sidecar container is used for taking over the communication with the Jaeger server. This can be seen in the &lt;a href="https://github.com/fgiloux/auto-perf-test/blob/master/jmeter/openshift/apt-jmeter-job-persistent-tm.yaml"&gt;deployment configuration&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Detailed instructions on how to build the container image and run it on OpenShift are available in &lt;a href="https://github.com/fgiloux/auto-perf-test/tree/master/jmeter"&gt;my GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="_orchestration"&gt;Orchestration&lt;/h2&gt; &lt;p&gt;The last missing bit is how can we automate the complete chain: from re-creating a clean environment with the latest code version to triggering the test run, asserting the results, tagging the code, performing configuration, creating container images and eventually promoting them to the next environment?&lt;/p&gt; &lt;h3 id="_pipeline"&gt;Pipeline&lt;/h3&gt; &lt;p&gt;Jenkins is the tool of choice for &lt;a href="https://developers.redhat.com/blog/category/ci-cd/"&gt;CI/CD&lt;/a&gt; on &lt;a href="https://developers.redhat.com/blog/category/kubernetes/"&gt;Kubernetes&lt;/a&gt; and it is shipped with OpenShift. &lt;a href="https://jenkins.io/doc/book/pipeline/"&gt;Pipelines&lt;/a&gt; are the recommended approach for automating these processes. When you start using Jenkins and pipelines for more and more components, you will see lots of similarities between them. For reusability, it is then best to use &lt;a href="https://jenkins.io/doc/book/pipeline/shared-libraries/"&gt;shared libraries&lt;/a&gt;. This was not done in our demo, but it is a simple task left to the reader.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s look now at the steps of the &lt;a href="https://github.com/fgiloux/auto-perf-test/blob/master/jenkins/pipelines/Jenkinsfile"&gt;demo Pipeline&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Trigger&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Ideally,  performance tests would run after every commit to the trunk. They should indeed be part of non-regression testing. There are plugins for integrating with various version control systems (VCS) like &lt;a href="https://wiki.jenkins.io/display/JENKINS/GitHub+Integration+Plugin"&gt;this one&lt;/a&gt;, which enable just that. It may, however, not be possible due to high resource requirements or the length of the tests. In that case, on-schedule runs are the next best thing. This can be done with the following single line in our Jenkins file, which will execute the pipeline once a day with automated distribution (you don’t want all your tests to be triggered at the exact same time).&lt;/p&gt; &lt;pre&gt;cron('H H * * *')&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Interacting with the OpenShift cluster&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The necessary plugins for interacting with OpenShift come configured out of the box with the default Jenkins container. Lots of operations are then made easy by the &lt;a href="https://github.com/openshift/jenkins-client-plugin"&gt;OpenShift Jenkins pipeline plugin&lt;/a&gt;, for instance, displaying the name of the current project:&lt;/p&gt; &lt;pre&gt;openshift.withCluster() { openshift.withProject() { echo "Using project: ${openshift.project()}" } }&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Clean sheet&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;When we run our test plan, we want to make sure that we are testing the desired code version and that there is no impact due to leftovers from previous test runs. Therefore, &amp;#8220;delete and re-create&amp;#8221; is the best approach. This can be done at the project/namespace level or labels can be used for a fine-grained approach. It is easy to apply a common label to all the objects deployed as part of the test run. They can then be retrieved and deleted using the following lines, where &lt;code&gt;testPlanName&lt;/code&gt; is specific to the pipeline or pipeline run if we want to allow parallel runs.&lt;/p&gt; &lt;pre&gt;if (openshift.selector("all", [ "testplan" : testPlanName ]).exists()) { openshift.selector("all", [ "testplan" : testPlanName ]).delete() } // all not being all if (openshift.selector("secrets", [ "testplan" : testPlanName ]).exists()) { openshift.selector("secrets", [ "testplan" : testPlanName ]).delete() } if (openshift.selector("configMaps", [ "testplan" : testPlanName ]).exists()) { openshift.selector("configMaps", [ "testplan" : testPlanName ]).delete() }&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Provisioning&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Templates may be used for creating the required objects:&lt;/p&gt; &lt;pre&gt;openshift.withCluster() { openshift.withProject() { // "template" is the name of the template loaded in OpenShift openshift.newApp(template) } }&lt;/pre&gt; &lt;p&gt;Or single objects can also be created:&lt;/p&gt; &lt;pre&gt;def testPlanPath = 'https://raw.githubusercontent.com/fgiloux/auto-perf-test/master/jmeter/openshift/apt-jmx-cm.yaml' def testPlanCm = openshift.create(testPlanPath).object() // Applying label makes it is easy to recognise for cleansing testPlanCm.metadata.labels['testplan'] = testPlanName openshift.apply(testPlanCm)&lt;/pre&gt; &lt;p&gt;However, in real life you may want to have the complete configuration stored in a VCS, checked out, and created by the build pipeline from the cloned repository (same code as above executed in a loop over the config files available in a directory).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Building the application image&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;For this, there are two schools of thought. The simplest approach is to have the build done in OpenShift with S2I. In that case, you would just start the build (potentially passing the repo branch/tag as a parameter) using a build configuration created during the environment provisioning, and OpenShift does the rest:&lt;/p&gt; &lt;pre&gt;def builds = openshift.selector("bc", 'camel-amq-fakeapp-s2i').startBuild("--wait=true")&lt;/pre&gt; &lt;p&gt;Another approach is to use a Maven slave (running in a container on OpenShift) to build the artifacts, push them to an artifact repository (like Nexus or Artifactory), have them scanned through SonarQube, and released (version number updated) and used for building the final container image with the source code, image, and artifacts similarly tagged. However, describing this goes beyond the scope of this article.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Rolling out the application&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Now that the image has been created, we can run the application in our test environment and wait until it has been started before the tests are launched:&lt;/p&gt; &lt;pre&gt;def dc = openshift.selector("dc", 'camel-amq-fakeapp').rollout() timeout(5) { openshift.selector("dc", 'camel-amq-fakeapp').related('pods').untilEach(1) { return (it.object().status.phase == "Running") }&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Test plan execution&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;We are now far enough along that the tests can be run. We may first want to register a &lt;a href="https://wiki.jenkins.io/display/JENKINS/Webhook+Step+Plugin"&gt;webhook&lt;/a&gt;, which is passed to the script running JMeter that we saw earlier:&lt;/p&gt; &lt;pre&gt;def hook = registerWebhook() def callbackUrl = hook.getURL()&lt;/pre&gt; &lt;p&gt;The next step is to run JMeter (best as a &lt;a href="https://github.com/fgiloux/auto-perf-test/blob/master/jmeter/openshift/apt-jmeter-job-tm.yaml"&gt;job&lt;/a&gt;) with the required parameters, where &lt;code&gt;BUILD_NUMBER&lt;/code&gt; is automatically generated by Jenkins and identifies the run:&lt;/p&gt; &lt;pre&gt;def models = openshift.process("apt-jmeter-job", "-p", "JMX_CONFIGMAP=${testPlanName}","-p","RESULT_SUB_DIR=${JOB_NAME}/${BUILD_NUMBER}","-p","CALLBACK_URL=${callbackUrl}")&lt;/pre&gt; &lt;p&gt;The Jenkins plugin lets us easily manipulate the object definition and, for instance, add a label to our job:&lt;/p&gt; &lt;pre&gt;for ( o in models ) { o.metadata.labels['testplan'] = testPlanName }&lt;/pre&gt; &lt;p&gt;The result can be applied to OpenShift:&lt;/p&gt; &lt;pre&gt;def created = openshift.create(models)&lt;/pre&gt; &lt;p&gt;At this point, the JMeter container is executing the test plan. We can wait until it has finished:&lt;/p&gt; &lt;pre&gt;timeout(10) { print "Waiting for tests to complete..." waitForWebhook hook }&lt;/pre&gt; &lt;p&gt;As we saw earlier, the test results are available on a shared drive mounted by Jenkins, so we can get them now processed by the Jenkins &lt;a href="https://wiki.jenkins.io/display/JENKINS/Performance+Plugin"&gt;performance plugin&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;perfReport sourceDataFiles: "/opt/performances/${JOB_NAME}/${BUILD_NUMBER}/*.jtl", compareBuildPrevious: true, modePerformancePerTestCase: true, modeOfThreshold: true, relativeFailedThresholdPositive: 50, relativeUnstableThresholdNegative: 40, relativeUnstableThresholdPositive: 40 // Job delete required due to the jaeger-agent sidecar not terminating with JMeter openshift.selector('job', ['testplan': testPlanName]).delete()&lt;/pre&gt; &lt;p&gt;This plugin provides a few graphs that give a quick overview of how the tests performed.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jenkins-jmeter-overview.png"&gt;&lt;img class=" aligncenter wp-image-552467 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jenkins-jmeter-overview.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jenkins-jmeter-overview.png" alt="Graphs that show performance information" width="502" height="740" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jenkins-jmeter-overview.png 502w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/jenkins-jmeter-overview-204x300.png 204w" sizes="(max-width: 502px) 100vw, 502px" /&gt;&lt;/a&gt;&lt;br /&gt; &lt;img class=" aligncenter wp-image-552477 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jenkins-jmeter-responsetime.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jenkins-jmeter-responsetime.png" alt="" width="898" height="552" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/jenkins-jmeter-responsetime.png 898w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/jenkins-jmeter-responsetime-300x184.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/jenkins-jmeter-responsetime-768x472.png 768w" sizes="(max-width: 898px) 100vw, 898px" /&gt;&lt;/p&gt; &lt;p&gt;More importantly, the plugin provides the possibility of conditioning the pipeline result and next stages (pass or fail) on thresholds or deviations of previous runs.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Tagging&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Finally, we may want to tag our image according to the outcome:&lt;/p&gt; &lt;pre&gt;openshift.tag("camel-amq-fakeapp:latest", "camel-amq-fakeapp:staging")&lt;/pre&gt; &lt;h3&gt;Image extension&lt;/h3&gt; &lt;p&gt;As we have seen going through the pipeline we may use additional plugins. In a disconnected environment, it is required to add them to the Jenkins image. In OpenShift, this is straightforward through the &lt;a href="https://docs.openshift.com/container-platform/3.10/using_images/other_images/jenkins.html#jenkins-as-s2i-builder"&gt;S2I process&lt;/a&gt;. The standard Jenkins template has also been amended to have the Jenkins container mount the persistent volume with the test result. This is available &lt;a href="https://github.com/fgiloux/auto-perf-test/blob/master/jenkins/openshift/perftest-jenkins-persistent-tm.yaml"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Whew; this was quite a long article! Congratulations to the readers who made it until the end. My last sentence is for saying thanks to my colleague Shrish Srivastava, who helped me with Prometheus and Grafana.&lt;/p&gt; &lt;h2&gt;All articles in the &amp;#8220;Leveraging OpenShift or Kubernetes for automated performance tests&amp;#8221; series&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/22/automated-performance-testing-kubernetes-openshift/"&gt;Part 1: Rationale and approach&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/03/leveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2/"&gt;Part 2: Building an observability stack&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/16/openshift-kubernetes-automated-performance-tests-part-3"&gt;Part 3: Automating tests and metrics gathering&lt;/a&gt; (this article)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F16%2Fopenshift-kubernetes-automated-performance-tests-part-3%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%203%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F16%2Fopenshift-kubernetes-automated-performance-tests-part-3%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%203%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F16%2Fopenshift-kubernetes-automated-performance-tests-part-3%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%203%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F16%2Fopenshift-kubernetes-automated-performance-tests-part-3%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%203%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F16%2Fopenshift-kubernetes-automated-performance-tests-part-3%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%203%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F16%2Fopenshift-kubernetes-automated-performance-tests-part-3%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%203%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F16%2Fopenshift-kubernetes-automated-performance-tests-part-3%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%203%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F16%2Fopenshift-kubernetes-automated-performance-tests-part-3%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%203%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F16%2Fopenshift-kubernetes-automated-performance-tests-part-3%2F&amp;#038;title=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%203%29" data-a2a-url="https://developers.redhat.com/blog/2019/01/16/openshift-kubernetes-automated-performance-tests-part-3/" data-a2a-title="Leveraging OpenShift or Kubernetes for automated performance tests (part 3)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/16/openshift-kubernetes-automated-performance-tests-part-3/"&gt;Leveraging OpenShift or Kubernetes for automated performance tests (part 3)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/MFp67gKpwPc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This is the third of a series of three articles based on a session I held at EMEA Red Hat Tech Exchange. In the first article, I presented the rationale and approach for leveraging Red Hat OpenShift or Kubernetes for automated performance testing, and I gave an overview of the setup. In the second article, [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/16/openshift-kubernetes-automated-performance-tests-part-3/"&gt;Leveraging OpenShift or Kubernetes for automated performance tests (part 3)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/01/16/openshift-kubernetes-automated-performance-tests-part-3/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">552337</post-id><dc:creator>Frédéric Giloux</dc:creator><dc:date>2019-01-16T13:00:08Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/16/openshift-kubernetes-automated-performance-tests-part-3/</feedburner:origLink></entry><entry><title>Podman: Managing pods and containers in a local container runtime</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/SZB7t9TN_Oc/" /><category term="Containers" /><category term="Developer Tools" /><category term="Kubernetes" /><category term="Red Hat Enterprise Linux" /><category term="containers" /><category term="kubernetes" /><category term="Podman" /><category term="pods" /><author><name>Brent Baude</name></author><id>https://developers.redhat.com/blog/?p=553577</id><updated>2019-01-15T13:00:36Z</updated><published>2019-01-15T13:00:36Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400;"&gt;People associate running pods with &lt;/span&gt;&lt;a href="https://kubernetes.io/"&gt;&lt;span style="font-weight: 400;"&gt;Kubernetes&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;. And when they run containers in their development runtimes, they do not even think about the role pods could play—even in a localized runtime.  Most people coming from the Docker world of running single containers do not envision the concept of running pods. There are several good reasons to consider using pods locally, other than using pods to naturally group your containers.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;For example, suppose you have multiple containers that require the use of a MariaDB container.  But you would prefer to not bind that database to a routable network; either in your bridge or further.  Using a pod, you could bind to the &lt;code&gt;localhost&lt;/code&gt; address of the pod and all containers in that pod will be able to connect to it because of the shared network name space.&lt;/span&gt;&lt;span id="more-553577"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Podman Pods: what you need to know&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The &lt;/span&gt;&lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/pod/"&gt;&lt;span style="font-weight: 400;"&gt;Pod&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; concept was introduced by &lt;/span&gt;&lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;&lt;span style="font-weight: 400;"&gt;Kubernetes&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;.  Podman pods are similar to the Kubernetes &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;definition. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/podman-pod-architecture.png"&gt;&lt;img class=" aligncenter wp-image-554097 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/podman-pod-architecture.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/podman-pod-architecture.png" alt="Podman architecture: containers in a pod" width="859" height="518" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/podman-pod-architecture.png 859w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/podman-pod-architecture-300x181.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/podman-pod-architecture-768x463.png 768w" sizes="(max-width: 859px) 100vw, 859px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Every Podman pod includes an &amp;#8220;infra&amp;#8221; container.   This container does nothing, but go to sleep. Its purpose is to hold the namespaces associated with the pod and allow podman to connect other containers to the pod.  This allows you to start and stop containers within the POD and the pod will stay running, where as if the primary container controlled the pod, this would not be possible. The default infra container is based on the &lt;code&gt;k8s.gcr.io/pause&lt;/code&gt; image,  Unless you explicitly say otherwise, all pods will have container based on the default image. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Most of the attributes that make up the Pod are actually assigned to the &amp;#8220;infra&amp;#8221; container.  Port bindings, cgroup-parent values, and kernel namespaces are all assigned to the “infra” container. This is critical to understand, because once the pod is created these attributes are assigned to the &amp;#8220;infra&amp;#8221; container and cannot be changed. For example, if you create a pod and then later decide you want to add a container that binds new ports, Podman will not be able to do this.  You would need to recreate the pod with the additional port bindings before adding the new container.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;In the above diagram, notice the box above each container, conmon, this is the container monitor.  It is a small C Program that’s job is to watch the primary process of the container, and if the container dies, save the exit code.  It also holds open the tty of the container, so that it can be attached to later. This is what allows podman to run in detached mode (backgrounded), so podman can exit but conmon continues to run.  Each container has its own instance of conmon.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;The CLI: podman pod&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;We expose most of the interaction with pods through the &lt;code&gt;podman pod&lt;/code&gt; commands.  Among other actions, you can use &lt;code&gt;podman pod&lt;/code&gt; to create, delete, query, and inspect pods.  You can see all the pod related commands by running &lt;code&gt;podman pod&lt;/code&gt; without any arguments.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman pod&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;NAME:&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   podman pod - Manage container pods.&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;Pods are a group of one or more containers sharing the same network, pid and ipc namespaces.&lt;/span&gt; &lt;span style="font-weight: 400;"&gt; USAGE:&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   podman pod command [command options] [arguments...]&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;COMMANDS:&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;create    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Create a new empty pod&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;exists    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Check if a pod exists in local storage&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;inspect   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;displays a pod configuration&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;kill      &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Send the specified signal or SIGKILL to containers in pod&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;pause     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Pause one or more pods&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;ps, ls, list  List pods&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;restart   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Restart one or more pods&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;rm        &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Remove one or more pods&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;start     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Start one or more pods&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;stats     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Display percentage of CPU, memory, network I/O, block I/O and PIDs for containers in one or more pods&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;stop      &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Stop one or more pods&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;top       &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Display the running processes of containers in a pod&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;unpause   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Unpause one or more pods&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;OPTIONS:&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   --help, -h  show help&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Create a pod&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The traditional way to create a pod with Podman is using the &lt;code&gt;podman pod create&lt;/code&gt; command.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman pod create --help&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;NAME:&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   podman pod create - Create a new empty pod&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;USAGE:&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   podman pod create [command options] [arguments...]&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;DESCRIPTION:&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   Creates a new empty pod. The pod ID is then printed to stdout. You can then start it at any time with the podman pod start &amp;#60;pod_id&amp;#62; command. The pod will be created with the initial state 'created'.&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;OPTIONS:&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   --cgroup-parent value  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Set parent cgroup for the pod&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   --infra                &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Create an infra container associated with the pod to share namespaces with&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   --infra-command value  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;The command to run on the infra container when the pod is started (default: "/pause")&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   --infra-image value    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;The image of the infra container to associate with the pod (default: "k8s.gcr.io/pause:3.1")&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   --label value, -l value&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Set metadata on pod (default [])&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   --label-file value     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Read in a line delimited file of labels (default [])&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   --name value, -n value &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Assign a name to the pod&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   --pod-id-file value    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Write the pod ID to the file&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   --publish value, -p value  Publish a container's port, or a range of ports, to the host (default [])&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;   --share value          &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;A comma delimited list of kernel namespaces the pod will share (default: "cgroup,ipc,net,uts")&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;In its most basic context, you can simply issue &lt;code&gt;podman pod create&lt;/code&gt; and Podman will create a pod without extra attributes.  A random name will also be assigned to the pod.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman pod create&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;9e0a57248aedc453e7b466d73ef769c99e35d265d97f6fa287442083246f3762&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;We can list the pods using the &lt;code&gt;podman pod list&lt;/code&gt; command:&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman pod list&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;POD ID     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;NAME         &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;CREATED     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;# OF CONTAINERS   INFRA ID&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;9e0a57248aed   youthful_jones  Running 5 seconds ago   1 &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;6074ffd22b93&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Note that the container has a single container in it.  The container is the &amp;#8220;infra&amp;#8221; command. We can further observe this using the &lt;code&gt;podman ps&lt;/code&gt; command by passing the command line switch *&amp;#8211;pod*.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman ps -a --pod&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;CONTAINER ID  IMAGE    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;COMMAND  CREATED  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS    &lt;/span&gt; &lt;span style="font-weight: 400;"&gt;PORTS  NAMES         &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;POD&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;6074ffd22b93  k8s.gcr.io/pause:3.1  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;3 minutes ago  Up 3 minutes ago     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;9e0a57248aed-infra  9e0a57248aed&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Here we can see that the pod ID from &lt;code&gt;podman ps&lt;/code&gt; matches the pod id in &lt;code&gt;podman pod list&lt;/code&gt;.  And the container image is the same as the default &amp;#8220;infra&amp;#8221; container image.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Add a container to a pod&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;You can add a container to a pod using the *&amp;#8211;pod* option in the &lt;code&gt;podman create&lt;/code&gt; and &lt;code&gt;podman run&lt;/code&gt; commands.  For example, here we add a container running **top** to the newly created *youthful_jones* pod. Notice the use of *&amp;#8211;pod*.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman run -dt --pod youthful_jones docker.io/library/alpine:latest top&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;0f62e6dcdfdbf3921a7d73353582fa56a545502c89f0dfcb8736ce7be61c9271&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;And now two containers exist in our pod.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman pod ps&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;POD ID     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;NAME         &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;CREATED     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;# OF CONTAINERS   INFRA ID&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;9e0a57248aed   youthful_jones  Running 7 minutes ago   2 &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;6074ffd22b93&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Looking at the list of containers, we also see each container and their respective pod assignment.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman ps -a --pod&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;CONTAINER ID  IMAGE               &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;COMMAND  CREATED   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS         &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;PORTS  NAMES          &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;POD&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;0f62e6dcdfdb  docker.io/library/alpine:latest  top &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;14 seconds ago  Up 14 seconds ago     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;awesome_archimedes  9e0a57248aed&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;6074ffd22b93  k8s.gcr.io/pause:3.1                  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;7 minutes ago   Up 7 minutes ago      &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;9e0a57248aed-infra  9e0a57248aed&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Shortcut to create pods&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;We recently added the ability to create pods via the &lt;code&gt;podman run&lt;/code&gt;&lt;/span&gt; and &lt;code&gt;podman create&lt;/code&gt; commands. One upside to creating a pod with this approach is that the normal port bindings declared for the container will be assigned automatically to the &amp;#8220;infra&amp;#8221; container. However, if you need to specify more granular options for pod creation like kernel namespaces or different &amp;#8220;infra&amp;#8221; container image usage, you still need to create the pod manually as was first described. Nevertheless, for relatively basic pod creations, the shortcut is handy. As this feature was recent added, it isn&amp;#8217;t available in the version of Podman included with Red Hat Enterprise Linux 7.6 and 8 Beta.&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;To create a new pod with your new container, you simply pass *&amp;#8211;pod*: &lt;code&gt;new:&amp;#60;name&amp;#62;&lt;/code&gt;.  The use of **new:** indicates to Podman that you want to create a new pod rather than attempt to assign the container to an existing pod.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;To create a nginx container within a pod and expose port 80 from the container to port 32597 on the host, you would:&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman run -dt --pod new:nginx -p 32597:80 quay.io/libpod/alpine_nginx:latest&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;ac8839fc7dead8e391e7983ad8d0c27ce311d190b0a8eb72dcde535de272d537&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ curl http://localhost:32597&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;podman rulez&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;And here is what it looks like when listing containers:&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman ps -ap&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;CONTAINER ID  IMAGE                  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;COMMAND           &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;CREATED    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS        &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;PORTS              &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;NAMES           &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;POD&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;ac8839fc7dea  quay.io/libpod/alpine_nginx:latest  nginx -g daemon o... 4 minutes ago Up 4 minutes ago                     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;happy_cray      &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;3e4cad88f8c2&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;c2f7c5651275  k8s.gcr.io/pause:3.1                                  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;4 minutes ago Up 4 minutes ago  0.0.0.0:32597-&amp;#62;80/tcp  3e4cad88f8c2-infra 3e4cad88f8c2&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;MariaDB example&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The following asciinema demo shows how to create a pod via the shortcut method.  The container being run is a MariaDB container image and I bind only to its 127.0.0.1 address.  This means only containers in the same pod will able to access it. I then run an alpine container, install the MariaDB-client package, connect to the database itself, and show defined databases.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://asciinema.org/a/Xc818xXZ7TAlP9yvHU88IPVBK"&gt;&lt;img class="alignnone" src="https://asciinema.org/a/Xc818xXZ7TAlP9yvHU88IPVBK.svg" alt="" width="945" height="568" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Pods and container management&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;In Podman, the status of the pod and its containers can be exclusive to each other meaning that containers within pods can be restarted, stopped, and started without impacting the status of the pod.  Suppose we have a pod called &lt;code&gt;demodb&lt;/code&gt; and it contains two containers (and an “infra” container) running a MariaDB and a nginx session.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman pod ps&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;POD ID     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;NAME &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;CREATED         &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;# OF CONTAINERS   INFRA ID&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;fa7924a5196c   demodb Running   About a minute ago  3 &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;3005ed8491d0&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ sudo podman ps -p&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;CONTAINER ID  IMAGE                   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;COMMAND           &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;CREATED    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS        &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;PORTS  NAMES        &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;POD&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;02e37a3b9873  quay.io/libpod/alpine_nginx:latest   nginx -g daemon o... 4 minutes ago Up 4 minutes ago     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;optimistic_edison  fa7924a5196c&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;2597454063f8  quay.io/baude/mariadbpoddemo:latest  docker-entrypoint... 4 minutes ago Up 4 minutes ago     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;eloquent_golick&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;fa7924a5196c&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;If we wanted to stop and start the nginx container, the status of the MariaDB container and the pod itself will remain unchanged.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman stop optimistic_edison&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;02e37a3b987300e9124b61820119ae425c5e496b907800ecaf1194a3f50e5dcc&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;With the nginx container stopped, we can still observe the &lt;code&gt;demopod&lt;/code&gt; is running and the MariaDB container remains unchanged.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman pod ps&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;POD ID     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;NAME &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;CREATED     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;# OF CONTAINERS   INFRA ID&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;fa7924a5196c   demodb Running   5 minutes ago 3           &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;3005ed8491d0&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ sudo podman ps -p&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;CONTAINER ID  IMAGE                   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;COMMAND           &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;   C&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;REATED    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS        &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;PORTS  NAMES       &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;POD&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;2597454063f8  quay.io/baude/mariadbpoddemo:latest  docker-entrypoint... 5 minutes ago Up 5 minutes ago     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;eloquent_golick  fa7924a5196c&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;And we can start the nginx container to restore the pod back to its original state.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman start optimistic_edison&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;optimistic_edison&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ sudo podman ps -p&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;CONTAINER ID  IMAGE                   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;COMMAND           &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;CREATED    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS        &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;PORTS  NAMES        &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;POD&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;02e37a3b9873  quay.io/libpod/alpine_nginx:latest   nginx -g daemon o... 8 minutes ago Up 6 seconds ago     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;optimistic_edison  fa7924a5196c&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;2597454063f8  quay.io/baude/mariadbpoddemo:latest  docker-entrypoint... 8 minutes ago Up 8 minutes ago     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;eloquent_golick&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;fa7924a5196c&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;We can also stop the pod and all of its containers using the &lt;code&gt;podman pod stop&lt;/code&gt; command.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman pod stop demodb&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;fa7924a5196cb403298ad2ce24f0db30a3790e80729c7704ef5fdc27302f7ad0&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ sudo podman ps -ap&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;CONTAINER ID  IMAGE                   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;COMMAND           &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;CREATED     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS                 &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;PORTS                &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;NAMES           &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;POD&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;02e37a3b9873  quay.io/libpod/alpine_nginx:latest   nginx -g daemon o... 10 minutes ago Exited (0) 21 seconds ago                       &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;optimistic_edison   fa7924a5196c&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;2597454063f8  quay.io/baude/mariadbpoddemo:latest  docker-entrypoint... 10 minutes ago Exited (0) 19 seconds ago                       &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;eloquent_golick &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;fa7924a5196c&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;3005ed8491d0  k8s.gcr.io/pause:3.1                                   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;10 minutes ago Exited (0) 19 seconds ago  0.0.0.0:43871-&amp;#62;3306/tcp fa7924a5196c-infra  fa7924a5196c&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;And if we look at the status of the pod, it will show a state of “Exited”.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman pod ps&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;POD ID     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;NAME &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS   CREATED    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;# OF CONTAINERS   INFRA ID&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;fa7924a5196c   demodb Exited   13 minutes ago 3           &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;3005ed8491d0&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Likewise, we can also start the pod and all of its containers back up.  After which, all the containers in the pod should be running and the pod should show a status of “Running”.&lt;/span&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span style="font-weight: 400;"&gt;$ sudo podman pod start demodb&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;fa7924a5196cb403298ad2ce24f0db30a3790e80729c7704ef5fdc27302f7ad0&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ sudo podman ps -p&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;CONTAINER ID  IMAGE                   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;COMMAND           &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;CREATED     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;   &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS        &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;PORTS  NAMES         &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;POD&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;02e37a3b9873  quay.io/libpod/alpine_nginx:latest   nginx -g daemon o... 14 minutes ago Up 5 seconds ago     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;optimistic_edison  fa7924a5196c&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;2597454063f8  quay.io/baude/mariadbpoddemo:latest  docker-entrypoint... 14 minutes ago Up 4 seconds ago     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;eloquent_golick&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;fa7924a5196c&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;$ sudo podman pod ps&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;POD ID     &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;NAME &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;STATUS&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;CREATED      &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;  &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;# OF CONTAINERS  INFRA ID&lt;/span&gt; &lt;span style="font-weight: 400;"&gt;fa7924a5196c   demodb Running   14 minutes ago 3            &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;    &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;3005ed8491d0&lt;/span&gt; &lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;There is also a &lt;code&gt;podman pod restart&lt;/code&gt; command that will restart all the containers within a Pod.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Wrap up&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The ability for Podman to handle pod deployment is a clear differentiator to other container runtimes.  As a libpod maintainer, I am still realizing the advantages of having pods even in a localized runtime. There will most certainly be more development in Podman around pods as we learn how users exploit the use of them.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;For more information on Podman, make sure you visit the &lt;/span&gt;&lt;a href="https://github.com/containers/libpod"&gt;&lt;span style="font-weight: 400;"&gt;libpod project page&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; on github. Relevant blogs and news related to Podman can also be found at &lt;/span&gt;&lt;a href="https://podman.io/"&gt;&lt;span style="font-weight: 400;"&gt;podman.io&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Podman is included with Red Hat Enterprise Linux 7.6 as well as Red Hat Enterprise Linux 8 beta.&lt;/p&gt; &lt;h2&gt;More about Podman on the Red Hat Developer Blog&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/20/buildah-podman-containers-without-daemons/"&gt;Containers without daemons: Podman and Buildah available in RHEL 7.6 and RHEL 8 Beta&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/podman-next-generation-linux-container-tools/"&gt;Podman &amp;#8211; The next generation of Linux container tools&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/08/29/intro-to-podman/"&gt;Intro to Podman (New in Red Hat Enterprise Linux 7.6)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/29/managing-containerized-system-services-with-podman/"&gt;Managing containerized system services with Podman&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F15%2Fpodman-managing-containers-pods%2F&amp;#38;linkname=Podman%3A%20Managing%20pods%20and%20containers%20in%20a%20local%20container%20runtime" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F15%2Fpodman-managing-containers-pods%2F&amp;#38;linkname=Podman%3A%20Managing%20pods%20and%20containers%20in%20a%20local%20container%20runtime" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F15%2Fpodman-managing-containers-pods%2F&amp;#38;linkname=Podman%3A%20Managing%20pods%20and%20containers%20in%20a%20local%20container%20runtime" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F15%2Fpodman-managing-containers-pods%2F&amp;#38;linkname=Podman%3A%20Managing%20pods%20and%20containers%20in%20a%20local%20container%20runtime" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F15%2Fpodman-managing-containers-pods%2F&amp;#38;linkname=Podman%3A%20Managing%20pods%20and%20containers%20in%20a%20local%20container%20runtime" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F15%2Fpodman-managing-containers-pods%2F&amp;#38;linkname=Podman%3A%20Managing%20pods%20and%20containers%20in%20a%20local%20container%20runtime" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F15%2Fpodman-managing-containers-pods%2F&amp;#38;linkname=Podman%3A%20Managing%20pods%20and%20containers%20in%20a%20local%20container%20runtime" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F15%2Fpodman-managing-containers-pods%2F&amp;#38;linkname=Podman%3A%20Managing%20pods%20and%20containers%20in%20a%20local%20container%20runtime" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F15%2Fpodman-managing-containers-pods%2F&amp;#038;title=Podman%3A%20Managing%20pods%20and%20containers%20in%20a%20local%20container%20runtime" data-a2a-url="https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods/" data-a2a-title="Podman: Managing pods and containers in a local container runtime"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods/"&gt;Podman: Managing pods and containers in a local container runtime&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/SZB7t9TN_Oc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;People associate running pods with Kubernetes. And when they run containers in their development runtimes, they do not even think about the role pods could play—even in a localized runtime.  Most people coming from the Docker world of running single containers do not envision the concept of running pods. There are several good reasons to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods/"&gt;Podman: Managing pods and containers in a local container runtime&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">553577</post-id><dc:creator>Brent Baude</dc:creator><dc:date>2019-01-15T13:00:36Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods/</feedburner:origLink></entry><entry><title>Infinispan Spring Boot Starter 2.1.2.Final is out!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/y0iEd3NHMSM/infinispan-spring-boot-starter-212final.html" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="minor release" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><category term="Spring" scheme="searchisko:content:tags" /><category term="spring-boot" scheme="searchisko:content:tags" /><category term="spring-boot starters" scheme="searchisko:content:tags" /><author><name>Katia Aresti</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_spring_boot_starter_2_1_2_final_is_out</id><updated>2019-01-15T09:52:09Z</updated><published>2019-01-15T09:52:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Dear Infinispan and Spring Boot users,&lt;br /&gt;&lt;br /&gt;We have just released &lt;a href="https://github.com/infinispan/infinispan-spring-boot" target="_blank"&gt;Infinispan Spring Boot&lt;/a&gt;&amp;nbsp;&lt;b&gt;2.1.2.Final&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;2.1.2.Final&lt;/b&gt; is using&amp;nbsp;&lt;b&gt;Spring Boot 2.1.2.RELEASE&lt;/b&gt;&amp;nbsp;and contains some bug fixes related to JCache and Actuator integration.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The starter is now using Infinispan's&amp;nbsp;last stable release: &lt;b&gt;9.4.5.Final&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;You can find this release in the maven central repository.&lt;br /&gt;&lt;br /&gt;Please report any issues in our&amp;nbsp;&lt;a href="https://issues.jboss.org/projects/ISPN"&gt;issue tracker&lt;/a&gt;&amp;nbsp;and join the conversation in our&amp;nbsp;&lt;a href="https://infinispan.zulipchat.com/"&gt;Zulip Chat&lt;/a&gt;&amp;nbsp;to shape up our next release.&lt;br /&gt;&lt;br /&gt;Enjoy,&lt;br /&gt;&lt;br /&gt;The Infinispan Team&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/p38HKNZbYw8" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/y0iEd3NHMSM" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispan and Spring Boot users, We have just released Infinispan Spring Boot 2.1.2.Final. 2.1.2.Final is using Spring Boot 2.1.2.RELEASE and contains some bug fixes related to JCache and Actuator integration. The starter is now using Infinispan's last stable release: 9.4.5.Final. You can find this release in the maven central repository. Please report any issues in our issue tracker and joi...</summary><dc:creator>Katia Aresti</dc:creator><dc:date>2019-01-15T09:52:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/p38HKNZbYw8/infinispan-spring-boot-starter-212final.html</feedburner:origLink></entry><entry><title>The new National French PHR (Dossier Médical Partagé) – How does it work? - Part 1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/zXplwW4m3lw/the-new-national-french-phr-dossier.html" /><category term="feed_group_name_jbossascommunity" scheme="searchisko:content:tags" /><category term="feed_name_cxf_tips" scheme="searchisko:content:tags" /><author><name>fandry</name></author><id>searchisko:content:id:jbossorg_blog-the_new_national_french_phr_dossier_m_dical_partag_how_does_it_work_part_1</id><updated>2019-01-15T20:11:27Z</updated><published>2019-01-14T20:01:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-1SFMw1yd_8Y/XDy1fb2GnLI/AAAAAAAADc8/DeO2zCyv7ygAsvkAsLFKGAKEY36xloqdACLcBGAs/s1600/Header_DMP.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="332" data-original-width="555" src="https://4.bp.blogspot.com/-1SFMw1yd_8Y/XDy1fb2GnLI/AAAAAAAADc8/DeO2zCyv7ygAsvkAsLFKGAKEY36xloqdACLcBGAs/s1600/Header_DMP.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt;"&gt;Since &lt;/span&gt;&lt;a href="https://www.ameli.fr/paris/assure/actualites/dossier-medical-partage-dmp-la-memoire-de-votre-sante" style="font-family: calibri, sans-serif; font-size: 11pt;"&gt;November 2018&lt;/a&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt;"&gt;, each &lt;/span&gt;&lt;a href="http://www.leparisien.fr/societe/sante/la-ministre-invite-tous-les-francais-a-se-doter-d-un-carnet-de-sante-numerique-05-11-2018-7936035.php" style="font-family: calibri, sans-serif; font-size: 11pt;"&gt;French patient&lt;/a&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt;"&gt; can have access to a new national &lt;/span&gt;&lt;b style="font-family: calibri, sans-serif; font-size: 11pt;"&gt;Patient Health Record&lt;/b&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt;"&gt; (PHR) called in French the &lt;/span&gt;&lt;a href="https://www.dmp.fr/" style="font-family: calibri, sans-serif; font-size: 11pt;"&gt;Dossier Médical Partagé or DMP&lt;/a&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt;"&gt; (shared medical file).&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;b&gt;How does it work from an end-user perspective&lt;/b&gt;? In this post, I describe my &lt;b&gt;first experience&lt;/b&gt; with this new healthcare application - with all security and privacy precautions related to my protected health information (PHI).&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;span style="font-family: &amp;quot;times new roman&amp;quot;; font-size: small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;I have seen several large scale initiatives starting (e.g. &lt;a href="https://www.healthvault.com/en-us/blog/"&gt;Microsoft HealthVault&lt;/a&gt;, &lt;a href="http://fandry.blogspot.com/2009/04/himss-2009-how-consumers-user-phrs-kp.html"&gt;KP&lt;/a&gt;/&lt;a href="https://healthy.kaiserpermanente.org/health/care/consumer/my-health-manager"&gt;MyHealth Manager&lt;/a&gt;) with some initiatives including &lt;a href="https://www.informationweek.com/healthcare/electronic-health-records/5-reasons-why-google-health-failed/d/d-id/1098623"&gt;GoogleHealth&lt;/a&gt; who &lt;a href="http://fandry.blogspot.com/2008/09/abcs-of-google-health-data-api.html"&gt;was abandoned&lt;/a&gt; for some time and was reborn in another form&lt;span style="mso-spacerun: yes;"&gt;&amp;nbsp; &lt;/span&gt;as &lt;a href="https://www.blog.google/products/google-cloud/google-cloud-healthcare-new-apis-customers-partners-and-security-updates/"&gt;Google Cloud for Healthcare&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I have been working in the medical data integration and processing field for many years now and even &lt;a href="https://patents.justia.com/patent/20180358115"&gt;share a patent&lt;/a&gt; in this domain. By experience, I know that the most difficult part is not to design and create a scalable and secure structured medical repository, but to make sure that it is supplied with&lt;b&gt; up-to-date&lt;/b&gt; and &lt;b&gt;relevant data&lt;/b&gt;. I have a good knowledge of HL7, IHE profiles and other data integration standards and I recognize the&lt;b&gt; complexity of acquiring&lt;/b&gt; and &lt;b&gt;reconcile medical data &lt;/b&gt;to be used by &lt;b&gt;healthcare professionals&lt;/b&gt;. &lt;br /&gt;&amp;nbsp;&amp;nbsp;&lt;span style="font-family: &amp;quot;times new roman&amp;quot;; font-size: small;"&gt;&lt;/span&gt;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;First, &lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif;"&gt;l&lt;/span&gt;et’s start with the creation of my DMP. There are several options to create &lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif;"&gt;a&lt;/span&gt; national PHR/DMP in France. The first one is to ask &lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif;"&gt;a &lt;/span&gt;pharmacist to create &lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif;"&gt;it &lt;/span&gt;for you, the second option is to initiate the creation of the DMP yourself. This is the &lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif;"&gt;later&lt;/span&gt; I have chosen. &lt;br /&gt;&lt;br /&gt;From the main DMP web site creation page&amp;nbsp;&amp;nbsp;&lt;a href="https://www.dmp.fr/patient/creation/etape1"&gt;https://www.dmp.fr/patient/creation/etape1&lt;/a&gt;, I was able to create my account in few minutes after providing a specific creation code generated by dmp.fr and my social security or &lt;a href="https://en.wikipedia.org/wiki/INSEE_code"&gt;INSEE&amp;nbsp;number&lt;/a&gt;&amp;nbsp;(the main personal ID for patients in France).&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-iqXHoVKBuYQ/XDy1uhbcvFI/AAAAAAAADdA/9bnETmzEnlkdlc5CywR9zjYTQtJLW5hPACLcBGAs/s1600/DMP_Creation1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="409" data-original-width="637" src="https://3.bp.blogspot.com/-iqXHoVKBuYQ/XDy1uhbcvFI/AAAAAAAADdA/9bnETmzEnlkdlc5CywR9zjYTQtJLW5hPACLcBGAs/s1600/DMP_Creation1.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times new roman&amp;quot;; font-size: small;"&gt;&lt;/span&gt;I also need to add a 11 digit number that is located on my &lt;a href="https://en.wikipedia.org/wiki/Carte_Vitale"&gt;Carte Vitale&lt;/a&gt;, the &lt;a href="https://en.wikipedia.org/wiki/Health_insurance" title="Health insurance"&gt;health insurance&lt;/a&gt; &lt;a class="mw-redirect" href="https://en.wikipedia.org/wiki/Smartcard" title="Smartcard"&gt;card&lt;/a&gt; of the &lt;a href="https://en.wikipedia.org/wiki/Health_care_in_France" title="Health care in France"&gt;national health care system in France&lt;/a&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;a href="https://2.bp.blogspot.com/-JZkb90ZW4JM/XDy13f4EjZI/AAAAAAAADdI/_FtH58nwbME7lvDeJReoXUs0tGa2nahkACEwYBhgL/s1600/DMP_Creation1b.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="453" data-original-width="666" src="https://2.bp.blogspot.com/-JZkb90ZW4JM/XDy13f4EjZI/AAAAAAAADdI/_FtH58nwbME7lvDeJReoXUs0tGa2nahkACEwYBhgL/s1600/DMP_Creation1b.png" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;br /&gt;&amp;nbsp; ... some contact info (email and phone):&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;a href="https://3.bp.blogspot.com/-7U9JeiB9P88/XDy2KYc-TjI/AAAAAAAADdU/Exg8HJwutWkicitj8ya50gu34wTuaqABwCLcBGAs/s1600/DMP_Creation2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="340" data-original-width="363" src="https://3.bp.blogspot.com/-7U9JeiB9P88/XDy2KYc-TjI/AAAAAAAADdU/Exg8HJwutWkicitj8ya50gu34wTuaqABwCLcBGAs/s1600/DMP_Creation2.png" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;and very important, consent:&lt;br /&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;/span&gt; &lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;a href="https://3.bp.blogspot.com/-E_hBLzX--iU/XDy2RBkLfVI/AAAAAAAADdY/frV0CY5P4j883l4H8h5f3AQpEqhb4gm6QCLcBGAs/s1600/DMP_Creation3.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="191" data-original-width="663" src="https://3.bp.blogspot.com/-E_hBLzX--iU/XDy2RBkLfVI/AAAAAAAADdY/frV0CY5P4j883l4H8h5f3AQpEqhb4gm6QCLcBGAs/s1600/DMP_Creation3.png" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;and my account is created (credentials have been modified for obvious reasons).&lt;br /&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;/span&gt; &lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;a href="https://2.bp.blogspot.com/-9If2mStNcF4/XDy0_Ch4h0I/AAAAAAAADc0/d_XM14Kho2ECCFlvx6VQ0Mk3WMNWNzvVgCLcBGAs/s1600/DMP_Creation5.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="315" data-original-width="606" src="https://2.bp.blogspot.com/-9If2mStNcF4/XDy0_Ch4h0I/AAAAAAAADc0/d_XM14Kho2ECCFlvx6VQ0Mk3WMNWNzvVgCLcBGAs/s1600/DMP_Creation5.png" /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;Additional information is requested (e.g. address etc):&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-WkMEA_WtABI/XDy2mZTexXI/AAAAAAAADdg/YKCYfKmdwdkM5qH6ruOsGaGkZcIyCWlVQCLcBGAs/s1600/DMP_Creation6.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="328" data-original-width="668" src="https://1.bp.blogspot.com/-WkMEA_WtABI/XDy2mZTexXI/AAAAAAAADdg/YKCYfKmdwdkM5qH6ruOsGaGkZcIyCWlVQCLcBGAs/s1600/DMP_Creation6.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;Now that my account has been created, I am able to access it using my personal credentials:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;/span&gt; &lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-_mCtH6k9wIc/XDy3iWsdUuI/AAAAAAAADds/-O7ehDa-9zU220kcl2g6A0ngPZsA2LqCgCLcBGAs/s1600/DMP_Access_1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="405" data-original-width="681" src="https://1.bp.blogspot.com/-_mCtH6k9wIc/XDy3iWsdUuI/AAAAAAAADds/-O7ehDa-9zU220kcl2g6A0ngPZsA2LqCgCLcBGAs/s1600/DMP_Access_1.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;A two factor numeric ID is also sent to my cell phone (or email account) can be requested: &lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-y0CEj1HI0ko/XDy4h40zqDI/AAAAAAAADd4/5Lq1_I5qPBcim34AnyTvLV5q3MXVJvftgCLcBGAs/s1600/DMP_Access_2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="234" data-original-width="672" src="https://1.bp.blogspot.com/-y0CEj1HI0ko/XDy4h40zqDI/AAAAAAAADd4/5Lq1_I5qPBcim34AnyTvLV5q3MXVJvftgCLcBGAs/s1600/DMP_Access_2.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;and used for additional security:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-YAw6trD3wGk/XDzqGVzzT3I/AAAAAAAADfE/90wSQmen3iAw3T0j8w0oTLHoKrZ40yXEQCLcBGAs/s1600/DMP_Access_3.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="216" data-original-width="696" src="https://4.bp.blogspot.com/-YAw6trD3wGk/XDzqGVzzT3I/AAAAAAAADfE/90wSQmen3iAw3T0j8w0oTLHoKrZ40yXEQCLcBGAs/s1600/DMP_Access_3.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;For the first connection, I have the option to change some of my account settings: &lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-yElHe8KwCcg/XDy-nzQGzpI/AAAAAAAADeQ/0g6kG8-Tkl0MikGTZzpkv0pGeapAJ5aRgCLcBGAs/s1600/DMP_Access_4.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="500" data-original-width="915" src="https://3.bp.blogspot.com/-yElHe8KwCcg/XDy-nzQGzpI/AAAAAAAADeQ/0g6kG8-Tkl0MikGTZzpkv0pGeapAJ5aRgCLcBGAs/s1600/DMP_Access_4.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-R7b0OQ36wYk/XDzBGRBjCHI/AAAAAAAADes/QZ99ib289ws1h5p58ki5gCKib2BSW48qgCLcBGAs/s1600/DMP_Access_5.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="429" data-original-width="696" src="https://3.bp.blogspot.com/-R7b0OQ36wYk/XDzBGRBjCHI/AAAAAAAADes/QZ99ib289ws1h5p58ki5gCKib2BSW48qgCLcBGAs/s1600/DMP_Access_5.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;and some "break-the-glass" type authorization settings: &lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-dGCG2MUx27U/XDzBjU_-bpI/AAAAAAAADe4/9GQPZjBAbAYlhVMW40RffCd-CQ58fXlzgCLcBGAs/s1600/DMP_Access_7.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="228" data-original-width="552" src="https://2.bp.blogspot.com/-dGCG2MUx27U/XDzBjU_-bpI/AAAAAAAADe4/9GQPZjBAbAYlhVMW40RffCd-CQ58fXlzgCLcBGAs/s1600/DMP_Access_7.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Overall the experience of creating my DMP/PHR account was quite easy and without any particular problem. It was fast and secure. The initial performance of the application seems good, having in mind that this is just the beginning and that only a small number of patients of the French population have a DMP account.&lt;br /&gt;&lt;br /&gt;In my next post, I will explore the functionalities and the type of data that could be part of a DMP.&lt;br /&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;calibri&amp;quot; , sans-serif; font-size: 11pt; line-height: 107%;"&gt;&lt;br /&gt;&lt;/span&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/TechnologyHighlights/~4/HU1hmjimlK4" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/zXplwW4m3lw" height="1" width="1" alt=""/&gt;</content><summary>Since November 2018, each French patient can have access to a new national Patient Health Record (PHR) called in French the Dossier Médical Partagé or DMP (shared medical file). How does it work from an end-user perspective? In this post, I describe my first experience with this new healthcare application - with all security and privacy precautions related to my protected health information (PHI)....</summary><dc:creator>fandry</dc:creator><dc:date>2019-01-14T20:01:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/TechnologyHighlights/~3/HU1hmjimlK4/the-new-national-french-phr-dossier.html</feedburner:origLink></entry><entry><title>Generate jBPM Business Apps with Node.js Command-line interface (CLI)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/vm31Ox-WIMw/generate-jbpm-business-apps-with-nodejs.html" /><category term="feed_group_name_jbossjbpmcommunity" scheme="searchisko:content:tags" /><category term="feed_name_swiderskimaciej" scheme="searchisko:content:tags" /><author><name>Tihomir Surdilovic</name></author><id>searchisko:content:id:jbossorg_blog-generate_jbpm_business_apps_with_node_js_command_line_interface_cli</id><updated>2019-01-14T16:17:40Z</updated><published>2019-01-14T16:17:00Z</published><content type="html">In addition to &lt;a href="http://start.jbpm.org/"&gt;start.jbpm.org&lt;/a&gt;&amp;nbsp;there is now an command-line way to generate your jBPM Business Applications, namely with the &lt;a href="https://www.npmjs.com/package/jba-cli"&gt;jba-cli Node package&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-R8JtNDqGwHo/XDy0NpOlL-I/AAAAAAAAhuQ/FUGFW5Ly-AM3bEs-UyTIyzqetCV36HMXgCLcBGAs/s1600/Screen%2BShot%2B2019-01-14%2Bat%2B11.06.23%2BAM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="528" data-original-width="1600" height="131" src="https://3.bp.blogspot.com/-R8JtNDqGwHo/XDy0NpOlL-I/AAAAAAAAhuQ/FUGFW5Ly-AM3bEs-UyTIyzqetCV36HMXgCLcBGAs/s400/Screen%2BShot%2B2019-01-14%2Bat%2B11.06.23%2BAM.png" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;jba-cli package on&amp;nbsp;npmjs.com&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-DA9hixkTRms/XDy1DS9ihQI/AAAAAAAAhuc/N7Kx7DJ5FV8_uP5xWRAfpxfs0T_W7ysrACLcBGAs/s1600/jbausage.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="823" data-original-width="1600" height="205" src="https://3.bp.blogspot.com/-DA9hixkTRms/XDy1DS9ihQI/AAAAAAAAhuc/N7Kx7DJ5FV8_uP5xWRAfpxfs0T_W7ysrACLcBGAs/s400/jbausage.png" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Sample CLI usage&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;If you have Node installed locally you can install and run this package with:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre style="background: rgb(247, 247, 247); border-radius: 2px; box-sizing: border-box; color: #333333; font-family: monospace, monospace; font-size: 16px; margin-bottom: 24px; overflow-x: auto; padding: 13px 15px;"&gt;&lt;code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; box-sizing: border-box; font-family: &amp;quot;Fira Mono&amp;quot;, &amp;quot;Andale Mono&amp;quot;, Consolas, monospace; font-size: 1rem; font-variant-ligatures: none; letter-spacing: 0px; line-height: 24px; padding: 0px;"&gt;npm install jba-cli -g&lt;/code&gt;&lt;/pre&gt;&lt;pre style="background: rgb(247, 247, 247); border-radius: 2px; box-sizing: border-box; color: #333333; font-size: 16px; margin-bottom: 24px; overflow-x: auto; padding: 13px 15px;"&gt;&lt;span style="font-family: Fira Mono, Andale Mono, Consolas, monospace;"&gt;&lt;span style="font-variant-ligatures: none;"&gt;jba gen&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;div&gt;This allows your to build your jBPM Business app zip file without having to go through the browser.&amp;nbsp;&lt;/div&gt;&lt;div&gt;To contribute to this little cool project feel free to clone it and create pull requests from its &lt;a href="https://github.com/BootstrapJBPM/jba-cli"&gt;github repo&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here is youtube video showing how to install and use the jba-cli command line interface to generate your app:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe width="320" height="266" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/_FHWkchCq_o/0.jpg" src="https://www.youtube.com/embed/_FHWkchCq_o?feature=player_embedded" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/vm31Ox-WIMw" height="1" width="1" alt=""/&gt;</content><summary>In addition to start.jbpm.org there is now an command-line way to generate your jBPM Business Applications, namely with the jba-cli Node package. jba-cli package on npmjs.com Sample CLI usage If you have Node installed locally you can install and run this package with: npm install jba-cli -g jba gen This allows your to build your jBPM Business app zip file without having to go through the browser....</summary><dc:creator>Tihomir Surdilovic</dc:creator><dc:date>2019-01-14T16:17:00Z</dc:date><feedburner:origLink>http://mswiderski.blogspot.com/2019/01/generate-jbpm-business-apps-with-nodejs.html</feedburner:origLink></entry><entry><title>Building a Node.js service using the API-first approach</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fGQO80V8daI/" /><category term="Microservices" /><category term="Modern App Dev" /><category term="Node.js" /><category term="API-first" /><category term="API-Management" /><category term="express" /><category term="microservices" /><category term="nodejs" /><category term="OpenAPI" /><category term="Typescript" /><author><name>Mikel Sanchez</name></author><id>https://developers.redhat.com/blog/?p=551807</id><updated>2019-01-14T13:00:04Z</updated><published>2019-01-14T13:00:04Z</published><content type="html">&lt;p&gt;Nowadays technology companies are adopting the API as one of the most valuable pieces of their business.&lt;/p&gt; &lt;p&gt;What does it mean when we talk about API-first development? We already know the benefits of using an API-first approach:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Reduced interdependencies&lt;/li&gt; &lt;li&gt;Earlier validation&lt;/li&gt; &lt;li&gt;Early feedback with the freedom to change&lt;/li&gt; &lt;li&gt;Improved efficiency&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This article describes what it means to use the API-first design approach. It also walks through an example of using this approach with the &lt;a href="https://github.com/OAI/OpenAPI-Specification"&gt;OpenAPI Specification&lt;/a&gt; and with &lt;a href="https://github.com/isa-group/oas-tools"&gt;oas-tools&lt;/a&gt; as the &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt; back-end application, which enables you to care only about the business logic. All the validation of incoming requests are done by the &lt;code&gt;oas-tools&lt;/code&gt; library (based on the OpenAPI Specification file provided).&lt;span id="more-551807"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What does &amp;#8220;API-first approach&amp;#8221; mean?&lt;/h2&gt; &lt;p&gt;With the API-first approach, designing the API is the first priority before writing any code. Design of the API involves thorough thinking and planning through collaboration with different stakeholders. This result in high-level documentation describing the intent of the API.&lt;/p&gt; &lt;p&gt;This API contract acts as a central draft keeping all your team members aligned on what your API’s objectives are and how your API’s resources are exposed. The finalization of the contract allows the team to build the interface of the application.&lt;/p&gt; &lt;p&gt;After this, the cross-functional teams rely on this interface to build the rest of the application independent of each other. For example, the back-end developer starts building out the implementation logic behind the API,  the front-end developer starts working on different front-end applications, and quality testers start writing tests for the exposed interface.&lt;/p&gt; &lt;h2&gt;Choose an API specification&lt;/h2&gt; &lt;p&gt;The first step is to choose an API specification.&lt;em&gt; API specification&lt;/em&gt; is a term that is often used interchangeably with &lt;em&gt;API definition&lt;/em&gt;. While these terms have many similarities, they are different entities.&lt;/p&gt; &lt;p&gt;An API specification provides a broad understanding of how an API behaves and how the API links with other APIs. It explains how the API functions and the results to expect when using the API.&lt;/p&gt; &lt;p&gt;There are several API specification options:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/OAI/OpenAPI-Specification"&gt;OpenAPI Specification&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://raml.org/"&gt;RESTful API Modeling Language (RAML)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://apiblueprint.org/"&gt;API Blueprint&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://graphql.org"&gt;GraphQL&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We need to choose the one that makes our work easier and supports the languages that we are going to use.&lt;/p&gt; &lt;p&gt;For this article, I am going to show how to use the API-first approach using the OpenAPI Specification 3.0.0 and using &lt;code&gt;oas-tools&lt;/code&gt; for our Node.js application.&lt;/p&gt; &lt;h2&gt;Define the API using OpenAPI 3.0&lt;/h2&gt; &lt;p&gt;Before we start coding, we need to create the API that is going to be used by our developers.&lt;/p&gt; &lt;p&gt;This is our final API definition file:&lt;/p&gt; &lt;pre&gt;openapi: 3.0.0 info: title: Hello World API description: This is our Hello World API. version: '1.0' paths: /hello:   post:     x-swagger-router-controller: helloWorldRoute     operationId: helloWorldPost     tags:       - /hello     description: &amp;#62;-       Returns Hello world message.     parameters:       - name: greeting         in: query         description: Name of greeting         required: true         schema:           type: string     responses:       '200':         description: Successful request.         content:           application/json:             schema:               $ref: '#/components/schemas/Hello'       default:         description: Invalid request.         content:           application/json:             schema:               $ref: '#/components/schemas/Error'   get:     x-swagger-router-controller: helloWorldRoute     operationId: helloWorldGet     tags:       - /hello     description: &amp;#62;-       Returns Hello world message     parameters:       - name: greeting         in: query         description: Name of greeting         required: true         schema:           type: string     responses:       '200':         description: Successful request.         content:           application/json:             schema:               $ref: '#/components/schemas/Hello'       default:         description: Invalid request.         content:           application/json:             schema:               $ref: '#/components/schemas/Error' servers: - url: '/api' components: schemas:   Hello:     properties:       msg:         type: string     required:       - msg   Error:     properties:       message:         type: string     required:       - message&lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s decompose it to have a better understanding:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;openapi: 3.0.0&lt;/code&gt; defines the version of the OpenAPI Specification that we are going to use.&lt;/li&gt; &lt;li&gt;&lt;code&gt;info&lt;/code&gt; provides extra information about the API, such as a description, title, and the current version.&lt;/li&gt; &lt;li&gt;&lt;code&gt;servers&lt;/code&gt; provides a list of servers and the base path for the API.&lt;/li&gt; &lt;li&gt;&lt;code&gt;paths&lt;/code&gt;  specifies application endpoints. As you can see, we have one path located at &lt;code&gt;/hello&lt;/code&gt; and then we define two REST operations: &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Let&amp;#8217;s look at the &lt;code&gt;post&lt;/code&gt; operation:&lt;/p&gt; &lt;p&gt;&lt;code&gt;paths&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;/hello&lt;/code&gt; is the endpoint.&lt;/li&gt; &lt;li&gt;&lt;code&gt;post:&lt;/code&gt; is the operation type.&lt;/li&gt; &lt;li&gt;&lt;code&gt;x-swagger-router-controller: helloWorldRoute&lt;/code&gt;: We will cover it later; annotations for &lt;code&gt;oas-tools&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;&lt;code&gt;operationId: helloWorldPost&lt;/code&gt;: We will cover it later; annotations for &lt;code&gt;oas-tools&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code&gt;tags&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;- /hello&lt;/code&gt;: Used for logical grouping.&lt;/li&gt; &lt;li&gt;&lt;code&gt;description&lt;/code&gt; : Description of the endpoint.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code&gt;parameters&lt;/code&gt;: Parameters required or allowed for the endpoint.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;- name: greeting&lt;/code&gt;: Name of the parameter.&lt;/li&gt; &lt;li&gt;&lt;code&gt;in: query&lt;/code&gt;: Defines where the parameter is located (query, body, etc.)&lt;/li&gt; &lt;li&gt;&lt;code&gt;description: Name of greeting&lt;/code&gt;: Description of the parameter.&lt;/li&gt; &lt;li&gt;&lt;code&gt;required: true&lt;/code&gt;: Specifies whether the parameter is required or optional.&lt;/li&gt; &lt;li&gt;&lt;code&gt;schema&lt;/code&gt;: Type of the parameter (boolean, number, string, etc.)&lt;/li&gt; &lt;li&gt;&lt;code&gt;type:string&lt;/code&gt;: Specifies a string parameter.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code&gt;responses&lt;/code&gt;: What we are expecting as a result of the call.&lt;/p&gt; &lt;ul&gt; &lt;li style="list-style-type: none;"&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;'200'&lt;/code&gt;: Specifies the 200 status response; we can add the ones that we need, for example, 401 if the user is not authorized, etc.&lt;/li&gt; &lt;li&gt;&lt;code&gt;description: Successful request.&lt;/code&gt;: Description of the response.&lt;/li&gt; &lt;li&gt;&lt;code&gt;content:&lt;/code&gt;: Content of the 200 status code response.&lt;/li&gt; &lt;li&gt;&lt;code&gt;application/json:&lt;/code&gt;: Content type returned by 200 status response.&lt;/li&gt; &lt;li&gt;&lt;code&gt;schema:&lt;/code&gt;: Type of object returned.&lt;/li&gt; &lt;li&gt;&lt;code&gt;$ref: '#/components/schemas/Hello'&lt;/code&gt;: Hello object returned, which is composed of the &lt;code&gt;msg&lt;/code&gt; property.&lt;/li&gt; &lt;li&gt;&lt;code&gt;default:&lt;/code&gt;: Default response.&lt;/li&gt; &lt;li&gt;&lt;code&gt;description:&lt;/code&gt;: Description of the default response.&lt;/li&gt; &lt;li&gt;&lt;code&gt;content:&lt;/code&gt;: Content of the default response.&lt;/li&gt; &lt;li&gt;&lt;code&gt;application/json:&lt;/code&gt; : Content type returned by the default response.&lt;/li&gt; &lt;li&gt;&lt;code&gt;schema:&lt;/code&gt;: Type of object returned by the default response.&lt;/li&gt; &lt;li&gt;&lt;code&gt;$ref: '#/components/schemas/Error'&lt;/code&gt;: Error object returned by the default response.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Looking at the specification, we should be able to call it by using the following URL: &lt;code&gt;GET &amp;#60;serverUrl&amp;#62;/api/hello?greeting=redhat&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Now that we have the API definition completed, what can we use to increase our development speed? For the Node.js back-end app, we are going to use &lt;code&gt;oas-tools&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Node.js back-end development&lt;/h2&gt; &lt;p&gt;&lt;code&gt;oas-tools&lt;/code&gt; is a Node.js module for managing RESTful APIs defined with OpenAPI specs over &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt; servers. Automatically it’s going to check if an incoming request matches our definition, and it will reject it if it doesn’t satisfy our requirements. The result? Less coding time, all the validations are managed by &lt;code&gt;oas-tools&lt;/code&gt;, and we need to care only about the business logic.&lt;/p&gt; &lt;p&gt;I have created a project that has all the required steps and integrations done. Looking into it, we are going to cover the different pieces needed to make it work. You can find the project can at &lt;a href="https://github.com/rhappdev/nodejs-template/tree/openapi3"&gt;github.com/rhappdev/nodejs-template&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;There are two branches:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: Using the OpenAPI 2.x spec&lt;/li&gt; &lt;li&gt;&lt;code&gt;openapi3&lt;/code&gt;: Using the OpenAPI 3.0.0 spec&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We are going to cover OpenAPI 3.0, but the two are nearly the same.&lt;/p&gt; &lt;p&gt;The example is a Node.js + Express + &lt;code&gt;oas-tools&lt;/code&gt; using &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; as the base programming language.&lt;/p&gt; &lt;p&gt;Here are the main commands you can use:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Transpile to TypeScript: &lt;code&gt;npm run build:live&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Run TypeScript application: &lt;code&gt;npm run dev&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Run transpiled application: &lt;code&gt;npm start&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Run tests: &lt;code&gt;npm run test&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Initialize the oas-tools middleware&lt;/h3&gt; &lt;p&gt;The following setup is required to initialize the middleware, which is located at &lt;code&gt;src/middlewares/swagger.ts&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;const swaggerDoc = loadDocumentSync(basePath + "/definition/swagger.yaml");   const options = {       controllers: basePath + "/routes",       loglevel: "debug",       strict: true,       validator: true,       docs: {           apiDocs: "/api-docs",           apiDocsPrefix: "",           swaggerUi: "/docs",           swaggerUiPrefix: ""       }   };   swaggerTools.configure(options);   swaggerTools.initialize(swaggerDoc, app, function() {       cb();   });&lt;/pre&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;swaggerDoc&lt;/code&gt;: Contains the location of the OpenAPI Specification file.&lt;/li&gt; &lt;li&gt;&lt;code&gt;options&lt;/code&gt;: Specifies the configuration. &lt;ul&gt; &lt;li&gt;&lt;code&gt;controllers&lt;/code&gt;: Location of the route controllers.&lt;/li&gt; &lt;li&gt;&lt;code&gt;loglevel&lt;/code&gt;: By defining a log level, you can categorize the logs and the amount of information that is going to appear.&lt;/li&gt; &lt;li&gt;&lt;code&gt;strict&lt;/code&gt;: Indicates whether validation must stop the request process if errors were found when validating according to the specification file.&lt;/li&gt; &lt;li&gt;&lt;code&gt;validator&lt;/code&gt;: Indicates whether validator middleware should be used.&lt;/li&gt; &lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: Shows the &lt;code&gt;swagger-ui&lt;/code&gt; interface, which is located at &lt;code&gt;/docs&lt;/code&gt;endpoint, to visualize and interact with the API’s resources without having any of the implementation logic in place. It’s automatically generated from your OpenAPI Specification.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code&gt;swaggerTools.configure&lt;/code&gt;: Sets up the custom configuration.&lt;/li&gt; &lt;li&gt;&lt;code&gt;swaggerTools.initialize&lt;/code&gt;: Initializes the middleware.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Add special annotations&lt;/h3&gt; &lt;p&gt;&lt;code&gt;oas-tools&lt;/code&gt; required special annotations to define the router controller and the &lt;code&gt;operationId&lt;/code&gt; to be used. As you saw in the &lt;code&gt;.yaml&lt;/code&gt; file, we have the following annotations:&lt;/p&gt; &lt;pre&gt;paths: /hello:   post:     x-swagger-router-controller: helloWorldRoute     operationId: helloWorldPost&lt;/pre&gt; &lt;p&gt;&lt;code&gt;x-swagger-router-controller&lt;/code&gt; specifies the name of the controller file associated with the &lt;code&gt;/hello&lt;/code&gt; path. &lt;code&gt;helloWorldRoute&lt;/code&gt;, exports two routes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;export const &lt;b&gt;helloWorldGet&lt;/b&gt;  = Router().use("/", asyncHandler(getHelloWorld, "helloWorldGet"));&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;export const &lt;b&gt;helloWorldPost&lt;/b&gt;  = Router().use("/", asyncHandler(getHelloWorld, "helloWorldPost"));&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code&gt;helloWorldGet&lt;/code&gt; and &lt;code&gt;helloWorldPost&lt;/code&gt; need to be added as &lt;code&gt;operationId&lt;/code&gt;’s.&lt;/p&gt; &lt;h3&gt;Implement the business logic&lt;/h3&gt; &lt;p&gt;Now that we have done all the required setup to validate the request and to ensure that it matches our specification, let’s define the business logic, as you can see &lt;code&gt;src/controllers/hello&lt;/code&gt; contains the following:&lt;/p&gt; &lt;pre&gt;export async function getHelloWorld(req: Request, res: Response): P&amp;#60;any&amp;#62; {   const greeting =   req.swagger.params &amp;#38;&amp;#38; req.swagger.params.greeting.value ? req.swagger.params.greeting.value : "World";   debug.log("Greeting: ", greeting);   res.send({"msg": "hello " + greeting} as Hello); }&lt;/pre&gt; &lt;p&gt;&lt;code&gt;oas-tools&lt;/code&gt; provides the parameters inside the &lt;code&gt;req.swagger&lt;/code&gt; property. The previous code gets the parameters and returns the &lt;code&gt;Hello&lt;/code&gt; object with the &lt;code&gt;msg&lt;/code&gt; property, as we defined in the spec.&lt;/p&gt; &lt;h3&gt;Run the application and check it&lt;/h3&gt; &lt;p&gt;Type &lt;code&gt;npm run dev&lt;/code&gt; and see how &lt;code&gt;oas-tools&lt;/code&gt; is initialized, which checks if the controllers and routes are defined:&lt;/p&gt; &lt;pre&gt;2018-12-12T16:34:24.498Z info: Valid specification file 2018-12-12T16:34:24.505Z info: Specification file dereferenced 2018-12-12T16:34:24.506Z debug: Register: POST - /hello 2018-12-12T16:34:24.506Z debug:   POST - /hello 2018-12-12T16:34:24.506Z debug:     OAS-doc has x-swagger-router-controller property 2018-12-12T16:34:24.748Z debug:       Controller for POST - /hello: OK 2018-12-12T16:34:24.753Z debug: Register: GET - /hello 2018-12-12T16:34:24.753Z debug:   GET - /hello 2018-12-12T16:34:24.753Z debug:     OAS-doc has x-swagger-router-controller property 2018-12-12T16:34:24.753Z debug:       Controller for GET - /hello: OK&lt;/pre&gt; &lt;p&gt;Once the service is up and running, we can create two &lt;code&gt;curl&lt;/code&gt; requests to check if &lt;code&gt;oas-tools&lt;/code&gt; does the required job.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;GET request with &lt;code&gt;greeting&lt;/code&gt; parameter is OK&lt;br /&gt; Request:&lt;/p&gt; &lt;pre&gt;curl -X GET "http://localhost:8001/api/hello?greeting=redhat" -H "accept: application/json"&lt;/pre&gt; &lt;p&gt;Response:&lt;/p&gt; &lt;pre&gt;{  "msg": "hello redhat" }&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;GET request without greeting parameter fails&lt;br /&gt; Request:&lt;/p&gt; &lt;pre&gt;curl -X GET "http://localhost:8001/api/hello" -H "accept: application/json"&lt;/pre&gt; &lt;p&gt;Response:&lt;/p&gt; &lt;pre&gt;[{"message":"Missing parameter greeting in query. "}]&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;As you can see, with this easy example. You only need to focus on the business logic. The &lt;code&gt;oas-tools&lt;/code&gt; middleware checks the incoming request against the API specification.&lt;/p&gt; &lt;h2&gt;Extras&lt;/h2&gt; &lt;p&gt;In addition, if you are working on a client app, there are code generators for many languages, which means that you don’t need to generate the required classes if you want to call to the back end:&lt;/p&gt; &lt;p&gt;The tool that does this for us is at &lt;a href="https://github.com/swagger-api/swagger-codegen.git"&gt;github.com/swagger-api/swagger-codegen.git&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: Use tag &lt;code&gt;3.0.0&lt;/code&gt; for OpenAPI version 3 and tag &lt;code&gt;master&lt;/code&gt; for version 2.x.&lt;/p&gt; &lt;p&gt;First of all, download the tool and type the following:&lt;/p&gt; &lt;pre&gt;mvn clean package java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i &amp;#60;yaml DefinitionFileLocation&amp;#62;.yaml -l typescript-angular -o test&lt;/pre&gt; &lt;p&gt;By running this command, we are able to generate the required classes for any programming language that is supported by the &lt;code&gt;swagger-codegen-cli&lt;/code&gt; tool. The above command generates the classes for Angular projects.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2019-01-02-at-10.12.17.png"&gt;&lt;img class=" aligncenter wp-image-551817 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2019-01-02-at-10.12.17.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2019-01-02-at-10.12.17.png" alt="API generated in test folder" width="623" height="205" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2019-01-02-at-10.12.17.png 623w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2019-01-02-at-10.12.17-300x99.png 300w" sizes="(max-width: 623px) 100vw, 623px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Many available languages are supported:&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2019-01-02-at-10.12.27.png"&gt;&lt;img class=" aligncenter wp-image-551827 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2019-01-02-at-10.12.27.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2019-01-02-at-10.12.27.png" alt="Supported languages" width="614" height="233" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2019-01-02-at-10.12.27.png 614w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2019-01-02-at-10.12.27-300x114.png 300w" sizes="(max-width: 614px) 100vw, 614px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, we have seen how we can set up a Node.js microservice by generating first the API Specification file and focusing only on developing the business logic. All the validation of the API will be managed by &lt;code&gt;oas-tools&lt;/code&gt;, and as a result, we will save development time.&lt;/p&gt; &lt;h2&gt;Other resources&lt;/h2&gt; &lt;p&gt;Here are other articles on the Red Hat Developer blog about related topics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/07/12/contract-first-api-design-with-apicurio-and-red-hat-fuse/" rel="bookmark"&gt;Contract-First API Design with Apicurio and Red Hat Fuse/Camel&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/04/11/api-journey-idea-deployment-agile-part1/"&gt;An API Journey: From idea to deployment the Agile Way&lt;/a&gt; – (A three part series)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/10/04/modern-web-apps-openshift-part-1/" rel="bookmark"&gt;Modern Web Applications on OpenShift: Part 1 – Web apps in two commands&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F14%2Fbuilding-a-node-js-service-using-the-api-first-approach%2F&amp;#38;linkname=Building%20a%20Node.js%20service%20using%20the%20API-first%20approach" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F14%2Fbuilding-a-node-js-service-using-the-api-first-approach%2F&amp;#38;linkname=Building%20a%20Node.js%20service%20using%20the%20API-first%20approach" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F14%2Fbuilding-a-node-js-service-using-the-api-first-approach%2F&amp;#38;linkname=Building%20a%20Node.js%20service%20using%20the%20API-first%20approach" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F14%2Fbuilding-a-node-js-service-using-the-api-first-approach%2F&amp;#38;linkname=Building%20a%20Node.js%20service%20using%20the%20API-first%20approach" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F14%2Fbuilding-a-node-js-service-using-the-api-first-approach%2F&amp;#38;linkname=Building%20a%20Node.js%20service%20using%20the%20API-first%20approach" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F14%2Fbuilding-a-node-js-service-using-the-api-first-approach%2F&amp;#38;linkname=Building%20a%20Node.js%20service%20using%20the%20API-first%20approach" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F14%2Fbuilding-a-node-js-service-using-the-api-first-approach%2F&amp;#38;linkname=Building%20a%20Node.js%20service%20using%20the%20API-first%20approach" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F14%2Fbuilding-a-node-js-service-using-the-api-first-approach%2F&amp;#38;linkname=Building%20a%20Node.js%20service%20using%20the%20API-first%20approach" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F14%2Fbuilding-a-node-js-service-using-the-api-first-approach%2F&amp;#038;title=Building%20a%20Node.js%20service%20using%20the%20API-first%20approach" data-a2a-url="https://developers.redhat.com/blog/2019/01/14/building-a-node-js-service-using-the-api-first-approach/" data-a2a-title="Building a Node.js service using the API-first approach"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/14/building-a-node-js-service-using-the-api-first-approach/"&gt;Building a Node.js service using the API-first approach&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fGQO80V8daI" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Nowadays technology companies are adopting the API as one of the most valuable pieces of their business. What does it mean when we talk about API-first development? We already know the benefits of using an API-first approach: Reduced interdependencies Earlier validation Early feedback with the freedom to change Improved efficiency This article describes what it means [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/14/building-a-node-js-service-using-the-api-first-approach/"&gt;Building a Node.js service using the API-first approach&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/01/14/building-a-node-js-service-using-the-api-first-approach/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">551807</post-id><dc:creator>Mikel Sanchez</dc:creator><dc:date>2019-01-14T13:00:04Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/14/building-a-node-js-service-using-the-api-first-approach/</feedburner:origLink></entry><entry><title>Integration Key to Customer Experience - Example Process Integration</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Unn6G_z9z8I/integration-key-to-customer-experience-example-process-integration.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="BPM Suite" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-integration_key_to_customer_experience_example_process_integration</id><updated>2019-01-15T12:05:35Z</updated><published>2019-01-14T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-u7XB2B3xaNQ/XDhn_IlLITI/AAAAAAAAtZU/OamDcBi0IJg0_GNUii6H3mXPDGb8OMuZQCLcBGAs/s1600/omnichannel-header.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="815" data-original-width="1420" height="183" src="https://1.bp.blogspot.com/-u7XB2B3xaNQ/XDhn_IlLITI/AAAAAAAAtZU/OamDcBi0IJg0_GNUii6H3mXPDGb8OMuZQCLcBGAs/s320/omnichannel-header.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Part 7 - Example process integration&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;In &lt;a href="https://www.schabell.org/2018/12/integration-key-to-customer-experience-storage-services.html" target="_blank"&gt;my previous article from this series&lt;/a&gt; we looked in to details that determine how your integration becomes the key to transforming your customer experience.&lt;br /&gt;&lt;br /&gt;It started with laying out the process of how I've approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint.&lt;br /&gt;&lt;br /&gt;Having completed our discussions on the blueprint details, it's now time to look at a few specific examples.&lt;br /&gt;&lt;br /&gt;This article walks you through an example integration scenario showing how expanding the previously discussed details provides blueprints for your own integration scenarios.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Blueprint scenario&lt;/h3&gt;&lt;div&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;&lt;br /&gt;As mentioned before, the architectural details covered here are base on real customer integration solutions using open source technologies. The example scenario presented here is a&amp;nbsp;&lt;i&gt;generic common blueprint&lt;/i&gt;&amp;nbsp;that was uncovered researching customer solutions. It's my intent to provide a blueprint that provides guidance and not deep technical details.&lt;br /&gt;&lt;br /&gt;This section covers the visual representations as presented, but it's expected that they'll be evolving visually over time. There are many ways to represent each element in this architectural blueprint, but I've chosen icons, text and colours that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or &lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;contact me directly&lt;/a&gt; with your feedback.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://4.bp.blogspot.com/-mbkssc0vxL4/XDzkGGVVPKI/AAAAAAAAtZk/JSkh6uy95icCGVTsoDKzP5CX6xNJy0fKwCLcBGAs/s1600/Screenshot%2B2019-01-14%2Bat%2B14.33.22.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="1019" data-original-width="1600" height="203" src="https://4.bp.blogspot.com/-mbkssc0vxL4/XDzkGGVVPKI/AAAAAAAAtZk/JSkh6uy95icCGVTsoDKzP5CX6xNJy0fKwCLcBGAs/s320/Screenshot%2B2019-01-14%2Bat%2B14.33.22.png" title="" width="320" /&gt;&lt;/a&gt;Now let's take a look at the details in this blueprint and outline the solution.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Process integration&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The example blueprint shown in the figure titled &lt;i&gt;Example: Process Integration&lt;/i&gt;&amp;nbsp;outlines how to integrate automation in to your architecture. In this example, starting from the top, a mobile device is used to connect to your services through an API gateway. It's leveraging a group of microservices that provide &lt;i&gt;frontend&lt;/i&gt;&amp;nbsp;functionality, everything from push notifications, synchronization, to simple more complex activities that front end application need to service their clients.&lt;br /&gt;&lt;br /&gt;These &lt;i&gt;frontend microservices&lt;/i&gt;&amp;nbsp;are gathering data and information from the various organizational backend systems by working through &lt;i&gt;integration microservices&lt;/i&gt;.&amp;nbsp; There is a conscience effort here to keep this blueprint example as concise as possible, therefore the integration of various potential &lt;i&gt;backend systems&lt;/i&gt;&amp;nbsp;has been simplified to a single representative box.&lt;br /&gt;&lt;br /&gt;When interaction with process automation is desired, the mobile application works with &lt;i&gt;process facade microservices&lt;/i&gt;&amp;nbsp;that expose any functionality of the &lt;i&gt;process server&lt;/i&gt;, which leverages &lt;i&gt;container native storage&lt;/i&gt;&amp;nbsp;highlighting container-based storage options featured by container platforms.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Third party services&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://2.bp.blogspot.com/-gIqn_rmoyEA/XD3ESPT5Z2I/AAAAAAAAtZ4/cXddXr3WBhgpZLh4wNhW1tq0YqkZSpYagCLcBGAs/s1600/Screenshot%2B2019-01-15%2Bat%2B06.30.03.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="980" data-original-width="1600" height="196" src="https://2.bp.blogspot.com/-gIqn_rmoyEA/XD3ESPT5Z2I/AAAAAAAAtZ4/cXddXr3WBhgpZLh4wNhW1tq0YqkZSpYagCLcBGAs/s320/Screenshot%2B2019-01-15%2Bat%2B06.30.03.png" title="" width="320" /&gt;&lt;/a&gt;As many organizations have to deal with third party legacy decisions in their architectures, it makes sense to show the versatility that open source integration technology offers. It's easy to lean on metaphors where open standards in open source integration solutions offer organizations the &lt;a href="http://www.fundinguniverse.com/company-histories/victorinox-ag-history/" target="_blank"&gt;&lt;i&gt;versatility of a&amp;nbsp; Swiss Army knife&lt;/i&gt;&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The blueprint shown in figure titled &lt;i&gt;Example: Process Integration with Third Party Services&lt;/i&gt;&amp;nbsp;expands the original process integration use case with a &lt;i&gt;third party service platform&lt;/i&gt;.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Without specifying this &lt;i&gt;third party service platform&lt;/i&gt;, it's clear that leveraging the &lt;i&gt;integration microservices&lt;/i&gt;&amp;nbsp;an organization can establish a separation from legacy technology choices that might not be standing the test of time.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div&gt;This overview covers the first example architecture blueprints on process integration for omnichannel customer experience use case.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;An overview of the series on omnichannel customer experience portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-architectural-elements.html" target="_blank"&gt;Generic common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-external-application-details.html" target="_blank"&gt;External application details&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/12/integration-key-to-customer-experience-api-management-details.html" target="_blank"&gt;API management details&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/12/integraiton-key-to-customer-experience-container-platform.html" target="_blank"&gt;Container platform essentials&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/12/integration-key-to-customer-experience-storage-services.html" target="_blank"&gt;Storage services&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2019/01/integration-key-to-customer-experience-example-process-integration.html" target="_blank"&gt;Example process integration&lt;/a&gt;&lt;/li&gt;&lt;li&gt;More example integration blueprints&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, we start taking a look at more specific integration architecture blueprints that tie in all the elements we've discussed as part of a specific case in an architecture for omnichannel customer experience.&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=G-j7FSJM7Dw:8dy-OgdSa84:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=G-j7FSJM7Dw:8dy-OgdSa84:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=G-j7FSJM7Dw:8dy-OgdSa84:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=G-j7FSJM7Dw:8dy-OgdSa84:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=G-j7FSJM7Dw:8dy-OgdSa84:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=G-j7FSJM7Dw:8dy-OgdSa84:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=G-j7FSJM7Dw:8dy-OgdSa84:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=G-j7FSJM7Dw:8dy-OgdSa84:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=G-j7FSJM7Dw:8dy-OgdSa84:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=G-j7FSJM7Dw:8dy-OgdSa84:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=G-j7FSJM7Dw:8dy-OgdSa84:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/G-j7FSJM7Dw" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Unn6G_z9z8I" height="1" width="1" alt=""/&gt;</content><summary>Part 7 - Example process integration In my previous article from this series we looked in to details that determine how your integration becomes the key to transforming your customer experience. It started with laying out the process of how I've approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Having completed our di...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-01-14T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/G-j7FSJM7Dw/integration-key-to-customer-experience-example-process-integration.html</feedburner:origLink></entry></feed>
